{
  "use strict":                           { "prefix": "us",       "body": [ "'use strict';" ],                                 "description": "use strict\n" },
  "const":                                { "prefix": "c",        "body": [ "const ${1:name} = ${2:value};" ],                 "description": "const assignment\n" },
  "const awaited":                        { "prefix": "caw",      "body": [ "const ${1:name} = await ${2:value};" ],           "description": "const assignment awaited\n" },
  "const yielded":                        { "prefix": "cy",       "body": [ "const ${1:name} = yield ${2:value};" ],           "description": "const assignment yielded\n" },
  "const destructing object":             { "prefix": "cde",      "body": [ "const {${2}} = ${1};" ],                      "description": "const assignment destructuring\n" },
  "const destructing array":              { "prefix": "cdea",     "body": [ "const [${2}] = ${1};" ],                      "description": "const assignment destructuring\n" },
  "let":                                  { "prefix": "l",        "body": [ "let ${1:name} = ${2:value};" ],                   "description": "let assignment\n" },
  "let awaited":                          { "prefix": "law",      "body": [ "let ${1:name} = await ${2:value};" ],             "description": "let assignment awaited\n" },
  "let yielded":                          { "prefix": "ly",       "body": [ "let ${1:name} = yield ${2:value};" ],             "description": "let assignment yielded\n" },
  "let destructing object":               { "prefix": "lde",      "body": [ "let {${2}} = ${1};" ],                        "description": "let assignment destructuring\n" },
  "let destructing array":                { "prefix": "ldea",     "body": [ "let [${2}] = ${1};" ],                        "description": "let assignment destructuring\n" },
  "var":                                  { "prefix": "v",        "body": [ "var ${1:name} = ${2:value};" ],                   "description": "var assignment\n" },
  "var destructing object":               { "prefix": "vde",      "body": [ "var {${2}} = ${1};" ],                        "description": "var destructuring assignment\n" },
  "var destructing array":                { "prefix": "vdea",     "body": [ "var [${2}] = ${1};" ],                        "description": "var destructuring assignment\n" },

  "if":                                   { "prefix": "if",       "body": [ "if (${1:condition}) {\n\t${2}\n}" ],                                  "description": "if\n" },
  "if/else":                              { "prefix": "ife",      "body": [ "if (${1:condition}) {\n\t${2}\n} else {\n\t${3}\n}" ],                "description": "if/else\n" },
  "else if":                              { "prefix": "ei",       "body": [ "else if (${1:condition}) {\n\t${2}\n}" ],                             "description": "else if\n" },
  "else":                                 { "prefix": "el",       "body": [ "else {\n\t${1}\n}" ],                                                 "description": "else\n" },
  "switch case":                          { "prefix": "swi",      "body": [ "switch (${1}) {\n\tcase ${2} :\n\t\t${3}\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n}" ], "description": "switch case\n" },
  "case":                                 { "prefix": "cas",      "body": [ "case ${1} :\n\t${2}\n\t\tbreak;" ],                                   "description": "switch's case\n" },

  "for of":                               { "prefix": "fof",      "body": [ "for (let ${1:item} of ${2:object}) {\n\t${3}\n}" ],                   "description": "Iterating over property names of iterable objects\n" },
  "for in":                               { "prefix": "fin",      "body": [ "for (let ${1:key} in ${2:object}) {\n\tif (${2:object}.hasOwnProperty(${1:key})) {\n\t\t${3}\n\t}\n}" ], "description": "Iterating over property values of iterable objects\n" },
  "for loop iterable":                    { "prefix": "fl",       "body": [ "for (let ${1:i} = 0, ${2:len} = ${3:iterable}.length; ${1:i} < ${2:len}; ${1:i}++) {\n\t${4}\n}" ],      "description": "for loop iterable\n" },
  "for loop iterable(reverse)":           { "prefix": "flr",      "body": [ "for (let ${1} = ${2}.length - 1; ${1} >= 0; ${1}--) {\n\t${3}\n}" ],  "description": "reverse for loop iterable\n" },
  "while iteration":                      { "prefix": "wh",       "body": [ "while (${1:condition}) {\n\t${2}\n}" ],                               "description": "while iteration\n" },
  "while iteration decrementing":         { "prefix": "whi",      "body": [ "let ${1:iterable}Index = ${1:array}.length\nwhile (${1:iterableIndex}Index--) {\n\t${2}\n}" ],           "description": "while iteration decrementing\n" },

  "Array.isArray()":                      { "prefix": "isa",      "body": [ "Array.isArray(${1:source})" ],                                   "description": "Array.isArray()\n" },
  "Array.from(arrayLike)":                { "prefix": "arfr",     "body": [ "Array.from(${1:arrayLike})" ],                                   "description": "Array.from(arrayLike)\n" },
  "Array.from(arrayLike, mapFn)":         { "prefix": "arfr",     "body": [ "Array.from(${1:arrayLike}, (${2:item}) => {\n\t${3}\n})" ],       "description": "Array.from(arrayLike, mapFn)\n" },
  "Array.of(elementN)":                   { "prefix": "arof",     "body": [ "Array.of(${1:elementN})" ],                                      "description": "Array.of(elementN)\n" },
  "array.concat":                         { "prefix": "arc",      "body": [ "${1:iterable}.concat(${2:item})" ],                              "description": "array.concat\n" },
  "array.copyWithin":                     { "prefix": "arcw",     "body": [ "${1:iterable}.copyWithin(${2:target}, ${3:start}, ${4:end})" ],  "description": "array.copyWithin\n" },
  "array.fill":                           { "prefix": "arfill",   "body": [ "${1:iterable}.fill(${2:value}, ${3:start}, ${4:end})" ],         "description": "array.fill\n" },
  "array.every":                          { "prefix": "are",      "body": [ "${1:iterable}.every((${2:item}) => {\n\t${3}\n})" ],    "description": "array.every\n" },
  "array.filter":                         { "prefix": "arf",      "body": [ "${1:iterable}.filter((${2:item}) => {\n\t${3}\n})" ],   "description": "array.filter\n" },
  "array.find":                           { "prefix": "arfd",     "body": [ "${1:iterable}.find((${2:item}) => {\n\t${3}\n})" ],     "description": "array.find\n" },
  "array.findIndex":                      { "prefix": "arfdi",    "body": [ "${1:iterable}.findIndex((${2:item}) => {\n\t${3}\n})" ],"description": "array.findIndex\n" },
  "array.flat(depth)":                    { "prefix": "arflat",   "body": [ "${1:iterable}.flat()" ],                                "description": "array.flat(depth), return a new array\n" },
  "array.flatMap(callback)":              { "prefix": "arflatMap","body": [ "${1:iterable}.flatMap((${2:item}) => ${3:item})" ],                          "description": "array.flatMap(), \nnew_array = arr.flatMap(function callback(currentValue[, index[, array]]) { \n\t//return element for new_array; \n}[, thisArg])\nreturn a new array\n" },
  "array.some":                           { "prefix": "ars",      "body": [ "${1:iterable}.some((${2:item}) => {\n\t${3}\n})" ],     "description": "array.some\n" },
  "array.map":                            { "prefix": "map",      "body": [ "${1:iterable}.map((${2:item}) => {\n\t${3}\n})" ],      "description": "array.map\n" },
  "array.forEach(function(item)":         { "prefix": "fe",       "body": [ "${1:iterable}.forEach(function(${2:item}) {\n\t${3}\n});" ],             "description": "array.forEach(function(item)\n" },
  "array.forEach(function(item, index)":  { "prefix": "fe",       "body": [ "${1:iterable}.forEach(function(${2:item}, ${3:index}) {\n\t${4}\n});" ], "description": "array.forEach(function(item, index)\n" },
  "array.forEach(arrow function(item))":  { "prefix": "fea",      "body": [ "${1:iterable}.forEach((${2:item}) => {\n\t${3}\n});" ],                  "description": "array.forEach(arrow function(item))\n" },
  "array.forEach(arrow function(item, index))":  { "prefix": "fea",      "body": [ "${1:iterable}.forEach((${2:item}, ${3:index}) => {\n\t${4}\n});" ],      "description": "array.forEach(arrow function(item, index))\n" },
  "array.reduce":                         { "prefix": "arr",      "body": [ "${1:iterable}.reduce((${2:accumulator}, ${3:currentValue}) => {\n\treturn ${3}\n})" ], "description": "array.reduce\n" },
  "sequence of 0..n":                     { "prefix": "seq",      "body": [ "[...Array(${1:length}).keys()]${2}" ],                                   "description": "sequence of 0..n\n" },

  "function declaration":                 { "prefix": "fn",       "body": [ "function ${1:name} (${2:params}) {\n\t${3}\n}" ],                "description": "function declaration\n" },
  "function expression(var)":             { "prefix": "vfn",      "body": [ "var ${1:name} = function (${2:params}) {\n\t${3}\n}" ],       "description": "function expression(var)\n" },
  "function expression(let)":             { "prefix": "lfn",      "body": [ "let ${1:name} = function (${2:params}) {\n\t${3}\n}" ],       "description": "function expression(let)\n" },
  "function expression(const)":           { "prefix": "cfn",      "body": [ "const ${1:name} = function (${2:params}) {\n\t${3}\n}" ],     "description": "function expression(const)\n" },
  "function as a property of an object":  { "prefix": "kf",       "body": [ "${1:name}: function(${2:params}) {\n\t${3}\n}" ],                "description": "function as a property of an object\n" },
  "function apply":                       { "prefix": "fnapply",  "body": [ "${1:method}.apply(${2:context}, [${3:params}]);" ],              "description": "function apply\n" },
  "function call":                        { "prefix": "fncall",   "body": [ "${1:method}.call(${2:context}, ${3:params});" ],                 "description": "function call\n" },
  "function bind":                        { "prefix": "fnbind",   "body": [ "${1}.bind(${2:this})${3}" ],                                     "description": "function bind\n" },
  "anonymous arrow function":             { "prefix": "af",       "body": [ "(${1:params}) => {\n\t${2}\n}" ],                                "description": "anonymous arrow function\n" },
  "arrow function with return":           { "prefix": "afr",      "body": [ "(${1:params}) => {\n\treturn ${2}\n}" ],                         "description": "arrow function with return\n" },
  "arrow function with destructuring":    { "prefix": "afd",      "body": [ "({${1:params}}) => ${2:statement}" ],                            "description": "arrow function with destructuring\n" },
  "anonymous function":                   { "prefix": "afn",      "body": [ "function (${1:params}) {${2}}" ],                                "description": "anonymous function\n" },
  "arrow function expression(let)":       { "prefix": "laf",      "body": [ "let ${1:name} = (${2:params}) => {\n\t${3}\n}" ],                "description": "arrow function expression(let)\n" },
  "arrow function expression(const)":     { "prefix": "caf",      "body": [ "const ${1:name} = (${2:params}) => {\n\t${3}\n}" ],              "description": "arrow function expression(const)\n" },
  "generator function":                   { "prefix": "gf",       "body": [ "function* ${1:name}(${2:params}) {\n\t${3}\n}" ],                "description": "Creates generator function\n" },
  "yield":                                { "prefix": "y",        "body": [ "yield ${1}" ] },
  "iife, arrow function":                 { "prefix": "iif",      "body": [ ";((${1:params}) => {\n\t${3}\n})(${2})" ],                       "description": "immediately-invoked function expression (IIFE)\n" },
  "iife":                                 { "prefix": "iife",      "body": [ ";(function (${1:params}) {\n\t${3}\n})(${2})" ],                "description": "immediately-invoked function expression (IIFE)\n" },

  "object literal":                       { "prefix": "ol",       "body": [ "{ ${1}: ${2}, }${3}" ],                                          "description": "object literal\n" },
  "key/value pair":                       { "prefix": "kv",       "body": [ "${1}: ${2}," ],                                                  "description": "key/value pair\n" },
  "Object.assign":                        { "prefix": "oa",       "body": [ "Object.assign(${1:target}, ${2:source})" ],                      "description": "Object.assign\n" },
  "Object.create":                        { "prefix": "oc",       "body": [ "Object.create(${1:obj})" ],                                      "description": "Object.create\n" },
  "Object.defineProperty":                { "prefix": "od",       "body": [ "Object.defineProperty(${1:dest}, '${2:prop}', {\n\t${3}\n})" ],  "description": "Object.defineProperty\n" },
  "Object.getOwnPropertyDescriptor":      { "prefix": "og",       "body": [ "Object.getOwnPropertyDescriptor(${1:obj}, '${2:prop}')" ],       "description": "Object.getOwnPropertyDescriptor\n" },
  "Object.keys":                          { "prefix": "ok",       "body": [ "Object.keys(${1:obj})" ],                                        "description": "Object.keys\n" },

  "typeof":                               { "prefix": "to",       "body": [ "typeof ${1:object} === '${2:undefined}'" ],                      "description": "typeof\n" },
  "instanceof":                           { "prefix": "io",       "body": [ "${1:object} instanceof '${2:constructor}'" ],                    "description": "instanceof\n" },

  "setTimeout":                           { "prefix": "st",       "body": [ "setTimeout(function() {\n\t${2}\n}, ${1:delay});" ],     "description": "setTimeout\n" },
  "setTimeOut, arrow function":           { "prefix": "sta",      "body": [ "setTimeout(() => {\n\t${2}\n}, ${1:delay});" ],          "description": "setTimeOut with arrow function\n" },
  "setInterval":                          { "prefix": "si",       "body": [ "setInterval(function() {\n\t${2}\n}, ${1:interval});" ], "description": "setInterval\n" },
  "setInterval, arrow function":          { "prefix": "sia",      "body": [ "setInterval(() => {\n\t${2}\n}, ${1:interval});" ],      "description": "setInterval with arrow function\n" },

  "console.dir":                          { "prefix": "cd",       "body": [ "console.dir($1);" ],                              "description": "console.dir\n" },
  "console.error":                        { "prefix": "ce",       "body": [ "console.error($1);" ],                            "description": "console.error\n" },
  "console.error labeled":                { "prefix": "celb",     "body": [ "console.error('${1}', ${1});" ],                  "description": "console.error labeled\n" },
  "console.info":                         { "prefix": "ci",       "body": [ "console.info($1);" ],                             "description": "console.info\n" },
  "console.log":                          { "prefix": "clg",      "body": [ "console.log($1);" ],                              "description": "console.log\n" },
  "console.log labeled":                  { "prefix": "clgl",     "body": [ "console.log('${1}', ${1});" ],                    "description": "console.log labeled\n" },
  "console.warn":                         { "prefix": "cw",       "body": [ "console.warn($1);" ],                             "description": "console.warn\n" },
  "console.warn labeled":                 { "prefix": "cwl",      "body": [ "console.warn('${1}', ${1});" ],                   "description": "console.warn labeled\n" },
  "console.assert":                       { "prefix": "ca",       "body": [ "console.assert(${1:expression}, ${2:object});" ], "description": "console.assert\n" },
  "console.clear":                        { "prefix": "cc",       "body": [ "console.clear();" ],                              "description": "console.clear\n" },
  "console.count":                        { "prefix": "cco",      "body": [ "console.count(${1:label});" ],                    "description": "console.count\n" },
  "console.group":                        { "prefix": "cg",       "body": [ "console.group(\"${1:label}\");" ],                "description": "console.group\n" },
  "console.groupEnd":                     { "prefix": "cge",      "body": [ "console.groupEnd();" ],                           "description": "console.groupEnd\n" },
  "console.table":                        { "prefix": "ct",       "body": [ "console.table(${1:object});" ],                   "description": "console.table\n" },
  "console.trace":                        { "prefix": "ctr",      "body": [ "console.trace(${1:object});" ],                   "description": "console.trace\n" },

  "JSON.parse()":                         { "prefix": "jp",       "body": [ "JSON.parse(${1:obj});" ],     "description": "JSON.parse()\n" },
  "JSON.stringify()":                     { "prefix": "js",       "body": [ "JSON.stringify(${1:obj});" ], "description": "JSON.stringify()\n" },

  "try/catch":                            { "prefix": "tc",       "body": [ "try {\n\t${1}\n} catch (${2:err}) {\n\t\n}" ],                        "description": "try/catch\n" },
  "try/catch/finally":                    { "prefix": "tcf",      "body": [ "try {\n\t${1}\n} catch (${2:err}) {\n\t\n} finally {\n\t\n}" ],       "description": "try/catch/finally\n" },
  "try/finally":                          { "prefix": "tf",       "body": [ "try {\n\t${1}\n} finally {\n\t\n}" ],                                 "description": "try/finally\n" },
  "throw new Error":                      { "prefix": "tne",      "body": [ "throw new ${1:error}" ],                                              "description": "throw new Error\n" },

  "return":                               { "prefix": "r",        "body": [ "return ${1};" ],                                  "description": "return\n" },
  "return null":                          { "prefix": "rn",       "body": [ "return null;" ],                                  "description": "return null\n" },
  "return this":                          { "prefix": "rt",       "body": [ "return this;" ],                                  "description": "return this\n" },
  "return new object":                    { "prefix": "ro",       "body": [ "return {\n\t${0}\n};" ],                          "description": "return new object\n" },

  "ternary operator":                     { "prefix": "ternary",  "body": [ "${1} ? ${2} : ${3};" ],                           "description": "ternary operator\n" },

  "alert":                                { "prefix": "al",       "body": [ "alert('${1:msg}');" ],                            "description": "window.alert\n" },
  "confirm":                              { "prefix": "conf",     "body": [ "confirm('${1:msg}');" ],                          "description": "window.confirm\n" },
  "prompt":                               { "prefix": "pm",       "body": [ "prompt('${1:msg}');" ],                           "description": "window.prompt\n" },
  "debugger":                             { "prefix": "de",       "body": [ "debugger;" ],                                     "description": "debugger\n" },

  "import":                               { "prefix": "im",       "body": [ "import ${2:moduleName} from '${1:module}';" ],                      "description": "Imports entire module statement\n" },
  "import module as":                     { "prefix": "imas",     "body": [ "import { ${2:originalName} as ${3:alias} } from '${1:module}';" ],  "description": "Import module as\n" },
  "import module all as":                 { "prefix": "imall",    "body": [ "import * as ${2:alias} from '${1:module}';" ],                      "description": "Import module all as\n" },
  "import module destructuring":          { "prefix": "imd",      "body": [ "import { ${2:export} } from '${1:module}';" ],                      "description": "Imports only a portion of the module\n" },
  "import without module name":           { "prefix": "imn",      "body": [ "import '${1:module}';" ],                                           "description": "Imports entire module without module name\n" },

  "export":                               { "prefix": "ex",       "body": [ "export ${1};" ],                                                    "description": "export\n" },
  "export const":                         { "prefix": "eco",      "body": [ "export const ${1:name} = ${2:value};" ],                            "description": "export const\n" },
  "export as":                            { "prefix": "eas",      "body": [ "export ${1} as ${2};" ],                                            "description": "export as\n" },
  "export from":                          { "prefix": "ef",       "body": [ "export ${1:default} from ${2:otherModule};" ],                      "description": "export from\n" },
  "export default":                       { "prefix": "ed",       "body": [ "export default ${1};" ],                                            "description": "export default\n" },
  "export class":                         { "prefix": "ecl",      "body": [ "export default class ${1:className} {\n\t${2}\n};\n" ],             "description": "export class\n" },
  "export class extends":                 { "prefix": "ece",      "body": [ "export default class ${1:className} extends ${2:baseClassName} {\n\t${3}\n};\n" ], "description": "export class extends\n" },
  "export default arrow function":        { "prefix": "edaf",     "body": [ "export default (${1:params}) => {\n\t${2}\n};\n" ],                 "description": "export default arrow function\n" },
  "export default function":              { "prefix": "edfn",     "body": [ "export default function ${1:name} (${2:params}) {\n\t${3}\n}" ],    "description": "export default function\n" },
  "export named arrow function":          { "prefix": "eaf",      "body": [ "export const ${1:name} = (${2:params}) => {\n\t$3\n};\n" ],        "description": "export named arrow function\n" },

  "class":                                { "prefix": "cl",       "body": [ "class ${1:name} {\n\tconstructor (${2:params}) {\n\t\t${3}\n\t}\n}" ],               "description": "class\n" },
  "class constructor":                    { "prefix": "cons",     "body": [ "constructor(${1:params}) {\n\t\t${2}\n\t}" ],                                        "description": "class constructor\n" },
  "class extends":                        { "prefix": "cle",      "body": [ "class ${1:className} extends ${2:baseClassName} {\n\tconstructor (${3:params}) {\n\t\tsuper(${3:params})\n\t\t${0}\n\t}\n}" ], "description": "class extends\n" },
  "getter":                               { "prefix": "gter",     "body": [ "get ${0:property} () {\n\t${1}\n}" ],                                                "description": "getter\n" },
  "setter":                               { "prefix": "ster",     "body": [ "set ${0:property} (${1:value}) {\n\t${2}\n}" ],                                      "description": "setter\n" },
  "getter and setter":                    { "prefix": "gs",       "body": [ "get ${0:property} () {\n\t${1}\n}\n\nset ${2:property} (${3:value}) {\n\t${4}\n}" ], "description": "getter and setter\n" },
  "method":                               { "prefix": "m",        "body": [ "${1:method} (${2:params}) {\n\t${3}\n}" ],                                           "description": "method\n" },
  "async method":                         { "prefix": "am",       "body": [ "async ${1:name}(${2:params}) {\n\t${3}\n}" ],                                        "description": "async method\n" },
  "prototype constructor":                { "prefix": "proc",     "body": [ "var ${1:Constructor} = function(${2:params}) {\n\t${3}\n};" ],                             "description": "prototypal constructor\n" },
  "prototype method":                     { "prefix": "prom",     "body": [ "${1:Constructor}.prototype.${2:method} = function (${3:params}) {\n\t${4}\n};" ],          "description": "prototype method\n" },
  "property get":                         { "prefix": "pgt",      "body": [ "get ${1:propertyName}() {\n\treturn this.${2};\n}" ],                                "description": "Creates a getter property inside a class\n" },
  "property set":                         { "prefix": "pst",      "body": [ "set ${1:propertyName}(${2:value}) {\n\t${3};\n}" ],                                  "description": "Creates a setter property inside a class\n" },

  "new Promise":                          { "prefix": "p",        "body": [ "new Promise((resolve, reject) => {\n\t${1}\n})" ],                  "description": "Promise\n" },
  "Promise.all":                          { "prefix": "pa",       "body": [ "Promise.all(${1:value})" ],                                         "description": "Promise.all\n" },
  "Promise.catch":                        { "prefix": "pc",       "body": [ "${1:promise}.catch(error => {\n\t${2}\n})" ],                       "description": "Promise.catch\n" },
  "Promise.finally":                      { "prefix": "pfin",     "body": [ "${1:promise}.finally(${2})${3}" ],                                  "description": "Promise.finally\n" },
  "Promise.reject":                       { "prefix": "prj",      "body": [ "Promise.reject(${1:value})" ],                                      "description": "Promise.reject\n" },
  "Promise.resolve":                      { "prefix": "prs",      "body": [ "Promise.resolve(${1:value})" ],                                     "description": "Promise.resolve\n" },
  "Promise.then":                         { "prefix": "pt",       "body": [ "${1:promise}.then((${2:value}) => {\n\t${3}\n})" ],                 "description": "Promise.then\n" },
  "Promise.then.catch":                   { "prefix": "ptc",      "body": [ "${1:promise}.then((${2:value}) => {\n\t${3}\n}).catch((${4:err}) => {\n\t${5}\n});" ], "description": "Promise.then.catch\n" },
  "return promise":                       { "prefix": "rp",       "body": [ "return new Promise((resolve, reject) => {\n\t${1}\n})" ],           "description": "return a new Promise\n" },

  "async named function":                 { "prefix": "asfn",     "body": [ "async function ${1:name} (${2:params}) {\n\t${3}\n}" ],             "description": "async named function\n" },
  "async anonymous function":             { "prefix": "asfna",    "body": [ "async function (${1:params}) {\n\t${2}\n}" ],                       "description": "async anonymous function\n" },
  "async arrow function":                 { "prefix": "asaf",     "body": [ "async (${1:params}) => {\n\t${2}\n}" ],                             "description": "async arrow function\n" },
  "async generator function":             { "prefix": "asgf",     "body": [ "async function* (${1:params}) {\n\t${2}\n}" ],                      "description": "async generator function\n" },
  "async named generator function":       { "prefix": "asgfn",    "body": [ "async function* ${1:name} (${2:params}) {\n\t${3}\n}" ],            "description": "async named generator function\n" },
  "await":                                { "prefix": "aw",       "body": [ "await ${1}" ],                                                      "description": "await\n" },
  "await Promise.all.map":                { "prefix": "awpm",     "body": [ "await Promise.all(${1:array}.map((${2:value}) => {\n\t${3}\n}))" ], "description": "await Promise.all.map\n" },
  "await Promise.all":                    { "prefix": "awpa",     "body": [ "await Promise.all(${1:value})" ],                                   "description": "await Promise.all\n" },

  "destructuring Array":                  { "prefix": "dar",      "body": [ "const [${2:propertyName}] = ${1:arrayToDestruct};" ],            "description": "Creates and assigns a local variable using array destructuring\n" },
  "destructuring Object":                 { "prefix": "dob",      "body": [ "const {${2:propertyName}} = ${1:objectToDestruct};" ],           "description": "Creates and assigns a local variable using object destructuring\n" },
  "destructuring parameter":              { "prefix": "dp",       "body": [ "{${0}}: ${1:parameter}" ],                                       "description": "destructuring parameter\n" },

  "addEventListener":                     { "prefix": "ael",      "body": [ "${1:document}.addEventListener('${2:event}', function (e) {\n\t${3}\n});" ], "description": "addEventListener\n" },
  "addEventListener arrow function":      { "prefix": "aela",     "body": [ "${1:document}.addEventListener('${2:event}', ${3:ev} => {\n\t${4}\n})" ],    "description": "addEventListener, arrow function\n" },
  "removeEventListener":                  { "prefix": "rel",      "body": [ "${1:document}.removeEventListener('${2:event}', ${3:listener})" ],           "description": "removeEventListener\n" },
  "event cancel default and propagation": { "prefix": "evc",      "body": [ "event.preventDefault();\nevent.stopPropagation();\nreturn false;" ],         "description": "ev.preventDefault(); ev.stopPropagation()\n" },
  "event preventDefault":                 { "prefix": "epd",      "body": [ "event.preventDefault();" ],                                                   "description": "event preventDefault\n" },
  "event stopPropagation":                { "prefix": "esp",      "body": [ "event.stopPropagation();" ],                                                  "description": "event stopPropagation\n" },

  "getElementById":                       { "prefix": "gi",       "body": [ "${1:document}.getElementById('${2:id}');" ],              "description": "getElementById\n" },
  "getElementsByClassName":               { "prefix": "gc",       "body": [ "${1:document}.getElementsByClassName('${2:class}');" ],   "description": "getElementsByClassName\n" },
  "getElementsByTagName":                 { "prefix": "gt",       "body": [ "${1:document}.getElementsByTagName('${2:tag}');" ],       "description": "getElementsByTagName\n" },
  "querySelector":                        { "prefix": "qs",       "body": [ "${1:document}.querySelector('${2:selector}');" ],         "description": "querySelector\n" },
  "querySelectorAll":                     { "prefix": "qsa",      "body": [ "${1:document}.querySelectorAll('${2:selector}');" ],      "description": "querySelectorAll\n" },
  "createDocumentFragment":               { "prefix": "cdf",      "body": [ "${1:document}.createDocumentFragment();$2" ],             "description": "createDocumentFragment\n" },
  "createElement":                        { "prefix": "cel",      "body": [ "${1:document}.createElement(${2:elem});" ],               "description": "createElement\n" },
  "getAttribute":                         { "prefix": "ga",       "body": [ "${1:document}.getAttribute('${2:attr}');" ],              "description": "getAttribute\n" },
  "setAttribute":                         { "prefix": "sa",       "body": [ "${1:document}.setAttribute('${2:attr}', ${3:value});" ],  "description": "setAttribute\n" },
  "removeAttribute":                      { "prefix": "ra",       "body": [ "${1:document}.removeAttribute('${2:attr}');" ],           "description": "removeAttribute\n" },
  "appendChild":                          { "prefix": "ac",       "body": [ "${1:document}.appendChild(${2:elem});" ],                 "description": "appendChild\n" },
  "removeChild":                          { "prefix": "rc",       "body": [ "${1:document}.removeChild(${2:elem});" ],                 "description": "removeChild\n" },
  "innerHTML":                            { "prefix": "ih",       "body": [ "${1:document}.innerHTML = '${2:elem}';" ],                "description": "innerHTML\n" },
  "textContent":                          { "prefix": "tco",      "body": [ "${1:document}.textContent = '${2:content}';" ],           "description": "textContent\n" },
  "classList.add":                        { "prefix": "cla",      "body": [ "${1:document}.classList.add('${2:class}');" ],            "description": "classList.add\n" },
  "classList.contains":                   { "prefix": "clc",      "body": [ "${1:document}.classList.contains('${2:class}');" ],       "description": "classList.contains\n" },
  "classList.remove":                     { "prefix": "clr",      "body": [ "${1:document}.classList.remove('${2:class}');" ],         "description": "classList.remove\n" },
  "classList.toggle":                     { "prefix": "clt",      "body": [ "${1:document}.classList.toggle('${2:class}');" ],         "description": "classList.toggle\n" },

  "module as class (CommonJS)":           { "prefix": "ec",       "body": [ "class ${1:name} {\n\tconstructor (${2:params}) {\n\t\t${3}\n\t}\n}\n\nmodule.exports = ${1:name}\n" ], "description": "exports.member (CommonJS)\n" },
  "exports.member (CommonJS)":            { "prefix": "em",       "body": [ "exports.${1:member} = ${2:value}" ],                                "description": "exports.member (CommonJS)\n" },
  "module.exports (CommonJS)":            { "prefix": "me",       "body": [ "module.exports = ${1:name}" ],                                      "description": "module.exports (CommonJS)\n" },
  "require (CommonJS)":                   { "prefix": "rq",       "body": [ "require('${1:module}')" ],                                          "description": "require (CommonJS)\n" },
  "require assignment (CommonJS)":        { "prefix": "crq",      "body": [ "const ${1:module} = require('${1:module}');" ],                     "description": "require assignment (CommonJS)\n" },
  "setImmediate (Node.JS)":               { "prefix": "sim",      "body": [ "setImmediate(() => {\n\t${1}\n})" ],                                "description": "setImmediate (Node.JS)\n" },
  "event handler":                        { "prefix": "on",       "body": [ "${1:emitter}.on('${2:event}', (${3:params}) => {\n\t${4}\n})" ],    "description": "event handler\n" },

  "test suite: describe":                 { "prefix": "desc",     "body": [ "describe('${1:description}', function () {\n\t${2}\n})" ],               "description": "test suite: describe\n" },
  "test suite: context":                  { "prefix": "cont",     "body": [ "context('${1:description}', ${2:callback});${0}" ],                      "description": "test suite: context\n" },
  "test suite: it synchronous":           { "prefix": "it",       "body": [ "it('${1:description}', () => {\n\t${2}\n})" ],                           "description": "test suite: it synchronous\n" },
  "test suite: it asynchronous":          { "prefix": "ita",      "body": [ "it('${1:description}', async (done) => {\n\t${2}\n\tdone();\n});${0}" ], "description": "test suite: it asynchronous\n" },
  "test suite: afterEach":                { "prefix": "afe",      "body": [ "afterEach(function () {\n\t${1}\n})" ],                                  "description": "test suite: afterEach\n" },
  "test suite: beforeEach":               { "prefix": "bfe",      "body": [ "beforeEach(function () {\n\t${1}\n})" ],                                 "description": "test suite: beforeEach\n" },
  "test suite: after":                    { "prefix": "aft",      "body": [ "after(function () {\n\t${1}\n})" ],                                      "description": "test suite: after\n" },
  "test suite: before":                   { "prefix": "bf",       "body": [ "before(function () {\n\t${1}\n})" ],                                     "description": "test suite: before\n" },

}