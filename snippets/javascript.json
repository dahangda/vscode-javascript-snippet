{"Array.length":{"prefix":"arl","body":["${1:iterable}.length;"],"description":"Array.length\n"},"Array.isArray()":{"prefix":"isa","body":["Array.isArray(${1:value});"],"description":"Array.isArray(value);\nreturn 'true' if the value is an Array; otherwise, 'false'.\n"},"Array.from(arrayLike)":{"prefix":"arfr","body":["Array.from(${1:arrayLike});"],"description":"Array.from(arrayLike);\nreturn a new Array instance, shallow-copied Array instance from an array-like or iterable object.\n"},"Array.from(arrayLike, mapFn)":{"prefix":"arfr","body":["Array.from(${1:arrayLike}, (${2:item}) => {\n\t${3}\n});"],"description":"Array.from(arrayLike[, mapFn[, thisArg]]);\n"},"Array.of(elementN)":{"prefix":"arof","body":["Array.of(${1:elementN});"],"description":"Array.of(elementN);\nreturn a new Array instance.\n"},"array.concat":{"prefix":"arc","body":["${1:iterable}.concat(${2:valueN});"],"description":"let newArray = oldArray.concat([value1[, value2[, ...[, valueN]]]]);\nreturn a new array\n"},"array.copyWithin":{"prefix":"arcw","body":["${1:iterable}.copyWithin(${2:target}, ${3:start}, ${4:end});"],"description":"array.copyWithin(target[, start[, end]]);\nreturn the modified array\n"},"array.entries":{"prefix":"are","body":["${1:iterable}.entries();"],"description":"array.entries();\nreturn a new Array Iterator object that contains the key/value pairs for each index in the array.\n"},"array.every":{"prefix":"arev","body":["${1:iterable}.every((${2:element}) => {\n\t${3}\n});"],"description":"array.every(callback(element[, index[, array]])[, thisArg]);\nreturn 'true' if the callback function returns a truthy value for every array element. Otherwise, 'false'.\nreturns 'true' for any condition put on an empty array\n"},"array.fill":{"prefix":"arfill","body":["${1:iterable}.fill(${2:value}, ${3:start}, ${4:end});"],"description":"array.fill(value[, start[, end]]);\nreturn the modified array\n"},"array.filter":{"prefix":"arf","body":["${1:iterable}.filter((${2:element}) => {\n\t${3}\n});"],"description":"let newArray = array.filter(callback(element[, index[, array]])[, thisArg]);\nreturn a new array\n"},"array.find":{"prefix":"arfi","body":["${1:iterable}.find((${2:element}) => {\n\t${3}\n});"],"description":"array.find(callback[, thisArg]);\nreturn the value of the first element in the array that satisfies the provided testing function. Otherwise 'undefined' is returned.\n"},"array.findIndex":{"prefix":"arfin","body":["${1:iterable}.findIndex((${2:element}) => {\n\t${3}\n});"],"description":"array.findIndex(callback(element[, index[, array]])[, thisArg]);\nreturn the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns '-1'.\n6th edition\n"},"array.flat(depth)":{"prefix":"arflat","body":["${1:iterable}.flat();"],"description":"let newArray = array.flat([depth]);\nreturn a new array\n"},"array.flatMap(callback)":{"prefix":"arflatMap","body":["${1:iterable}.flatMap((${2:value}) => ${3:value});"],"description":"let newArray = array.flatMap(function callback(currentValue[, index[, array]]) { }[, thisArg]);\nreturn a new array with each element being the result of the callback function and flattened to a depth of '1'.\n"},"array.forEach((currentValue) => {})":{"prefix":"fea","body":["${1:iterable}.forEach((${2:currentValue}) => {\n\t${3}\n});"],"description":"array.forEach(arrow function(currentValue));\n"},"array.forEach((currentValue, index) => {})":{"prefix":"feai","body":["${1:iterable}.forEach((${2:currentValue}, ${3:index}) => {\n\t${4}\n});"],"description":"array.forEach(arrow function(currentValue, index));\n"},"array.forEach(function(currentValue)":{"prefix":"fe","body":["${1:iterable}.forEach(function(${2:currentValue}) {\n\t${3}\n});"],"description":"array.forEach(function(currentValue);\n"},"array.forEach(function(currentValue, index)":{"prefix":"fei","body":["${1:iterable}.forEach(function(${2:currentValue}, ${3:index}) {\n\t${4}\n});"],"description":"array.forEach(function callback(currentValue [, index [, array]]) { }[, thisArg]);\n"},"array.includes":{"prefix":"ari","body":["${1:iterable}.includes(${2:valueToFind});"],"description":"array.includes(valueToFind[, fromIndex]);\nreturn a Boolean value\n"},"array.indexOf":{"prefix":"ario","body":["${1:iterable}.indexOf(${2:searchElement});"],"description":"array.indexOf(searchElement[, fromIndex]);\nreturn the first index of the element in the array; '-1' if not found.\n"},"array.join":{"prefix":"arj","body":["${1:iterable}.join(${2:separator});"],"description":"array.join([separator]);\nreturn a string with all array elements joined. If array.length is 0, the empty string is returned.\n"},"array.keys":{"prefix":"ark","body":["${1:iterable}.keys();"],"description":"array.keys();\nreturns a new Array Iterator object that contains the keys for each index in the array.\n"},"array.lastIndexOf":{"prefix":"arlio","body":["${1:iterable}.lastIndexOf(${2:searchElement});"],"description":"array.lastIndexOf(searchElement[, fromIndex]);\nreturn the last index of the element in the array; '-1' if not found.\n"},"array.map":{"prefix":"map","body":["${1:iterable}.map((${2:currentValue}) => {\n\t${3}\n});"],"description":"let newArray = array.map(function callback(currentValue[, index[, array]]) { }[, thisArg]);\nreturn a new array with each element being the result of the callback function.\n"},"array.pop":{"prefix":"arp","body":["${1:iterable}.pop();"],"description":"array.pop();\nreturn the removed element from the array; 'undefined' if the array is empty.\n"},"array.push":{"prefix":"arj","body":["${1:iterable}.push(${2:elementN});"],"description":"arr.push(element1[, ...[, elementN]]);\nreturn the new length of the array.\n"},"array.reduce":{"prefix":"arr","body":["${1:iterable}.reduce((${2:accumulator}, ${3:currentValue}) => {\n\treturn ${3}\n});"],"description":"array.reduce(callback(accumulator, currentValue[, index[, array]]), [, initialValue]);\nreturn The single value that results from the reduction.\n"},"array.reduce​Right":{"prefix":"arrr","body":["${1:iterable}.reduce​Right((${2:accumulator}, ${3:currentValue}) => {\n\treturn ${4}\n});"],"description":"array.reduceRight(callback(accumulator, currentValue[, index[, array]])[, initialValue]);\nreturn the value that results from the reduction.\n"},"array.reverse":{"prefix":"arre","body":["${1:iterable}.reverse();"],"description":"array.reverse();\nreturn the reversed array.\n"},"array.shift":{"prefix":"ars","body":["${1:iterable}.shift();"],"description":"array.shift();\nreturn the removed element from the array; 'undefined' if the array is empty.\n"},"array.slice":{"prefix":"arsl","body":["${1:iterable}.slice(${2:begin}, ${3:end});"],"description":"array.slice([begin[, end]]);\n return a shallow copy of a portion of an array into a new array object selected from begin to end (end not included). The original array will not be modified.\n"},"array.some":{"prefix":"arso","body":["${1:iterable}.some((${2:element}) => {\n\t${3}\n});"],"description":"array.some(callback(element[, index[, array]])[, thisArg]);\nreturn 'true' if the callback function returns a truthy value for at least one element in the array. Otherwise, 'false'.\nreturns false for any condition put on an empty array.\n"},"array.sort":{"prefix":"arsor","body":["${1:iterable}.sort((${2:firstEl}, ${3:secondEl}) => {\n\t${4}\n});"],"description":"array.sort([compareFunction(firstEl, secondEl)]);\nreturn the sorted array. Note that the array is sorted in-place, and no copy is made.\n"},"array.splice":{"prefix":"arsp","body":["${1:iterable}.splice(${2:start}, ${3:deleteCount}, ${4:item});"],"description":"let arrDeletedItems = array.splice(start[, deleteCount[, item1[, item2[, ...]]]]);\nchanges the contents of an array by removing or replacing existing elements and/or adding new elements in-place.\nreturn an array containing the deleted elements,\nIf no elements are removed, an empty array is returned.\n"},"array.unshift":{"prefix":"aru","body":["${1:iterable}.unshift(${2:elementN});"],"description":"array.unshift(element1[, ...[, elementN]])();\nreturn the new length of the array.\n"},"array.values":{"prefix":"arv","body":["${1:iterable}.values();"],"description":"array.values();\nreturn a new Array Iterator object that contains the values for each index in the array.\n"},"array[Symbol.iterator]()":{"prefix":"arsi","body":["${1:iterable}[Symbol.iterator]();"],"description":"array[Symbol.iterator]();\nThe initial value of the @@iterator property is the same function object as the initial value of the values() property.\n"},"sequence of 0..n":{"prefix":"seq","body":["[...Array(${1:length}).keys()]${2}"],"description":"sequence of 0..n\n"},"async function named":{"prefix":"asfn","body":["async function ${1:name} (${2:params}) {\n\tconst ${3:result} = await ${4:promise};\n\treturn ${3:result};\n}\n\n${1:name}().then(${5:result} => {$6});\n"],"description":"async function named\n"},"async function anonymous":{"prefix":"asfna","body":["async function (${1:params}) {\n\t${2}\n}\n"],"description":"async function anonymous\n"},"async generator function named":{"prefix":"asgfn","body":["async function* ${1:name} (${2:params}) {\n\t${3}\n}\n"],"description":"async generator function named\n"},"async generator function anonymous":{"prefix":"asgfna","body":["async function* (${1:params}) {\n\t${2}\n}\n"],"description":"async generator function anonymous\n"},"async arrow function":{"prefix":"asaf","body":["async (${1:params}) => {\n\t${2}\n}\n"],"description":"async arrow function\n"},"await":{"prefix":"aw","body":["await ${1:promise}"],"description":"await\n"},"await(const)":{"prefix":"caw","body":["const ${1:result} = await ${2:promise};"],"description":"await(const)\n"},"await Promise.all":{"prefix":"awpa","body":["await Promise.all(${1:value})\n"],"description":"await Promise.all\n"},"await Promise.all.map":{"prefix":"awpam","body":["await Promise.all(${1:array}.map((${2:value}) => {\n\t${3}\n}))\n"],"description":"await Promise.all.map\n"},"typeof":{"prefix":"to","body":["typeof ${1:object} === '${2:undefined}'"],"description":"typeof\n"},"instanceof":{"prefix":"io","body":["${1:object} instanceof '${2:constructor}'"],"description":"instanceof\n"},"setTimeout":{"prefix":"st","body":["setTimeout(function() {\n\t${2}\n}, ${1:delay});"],"description":"setTimeout\n"},"setTimeOut, arrow function":{"prefix":"sta","body":["setTimeout(() => {\n\t${2}\n}, ${1:delay});"],"description":"setTimeOut with arrow function\n"},"setInterval":{"prefix":"si","body":["setInterval(function() {\n\t${2}\n}, ${1:interval});"],"description":"setInterval\n"},"setInterval, arrow function":{"prefix":"sia","body":["setInterval(() => {\n\t${2}\n}, ${1:interval});"],"description":"setInterval with arrow function\n"},"JSON.parse()":{"prefix":"jp","body":["JSON.parse(${1:obj});"],"description":"JSON.parse()\n"},"JSON.stringify()":{"prefix":"js","body":["JSON.stringify(${1:obj});"],"description":"JSON.stringify()\n"},"try/catch":{"prefix":"tc","body":["try {\n\t${1}\n} catch (${2:err}) {\n\t\n}"],"description":"try/catch\n"},"try/catch/finally":{"prefix":"tcf","body":["try {\n\t${1}\n} catch (${2:err}) {\n\t\n} finally {\n\t\n}"],"description":"try/catch/finally\n"},"try/finally":{"prefix":"tf","body":["try {\n\t${1}\n} finally {\n\t\n}"],"description":"try/finally\n"},"throw new Error":{"prefix":"tne","body":["throw new ${1:error}"],"description":"throw new Error\n"},"return":{"prefix":"r","body":["return ${1};"],"description":"return\n"},"return null":{"prefix":"rn","body":["return null;"],"description":"return null\n"},"return this":{"prefix":"rt","body":["return this;"],"description":"return this\n"},"return new object":{"prefix":"ro","body":["return {\n\t${0}\n};"],"description":"return new object\n"},"ternary operator":{"prefix":"ternary","body":["${1} ? ${2} : ${3};"],"description":"ternary operator\n"},"alert":{"prefix":"al","body":["alert('${1:msg}');"],"description":"window.alert\n"},"confirm":{"prefix":"conf","body":["confirm('${1:msg}');"],"description":"window.confirm\n"},"prompt":{"prefix":"pm","body":["prompt('${1:msg}');"],"description":"window.prompt\n"},"debugger":{"prefix":"de","body":["debugger;"],"description":"debugger\n"},"encodeURI(URI)":{"prefix":"eu","body":["encodeURI(URI)"],"description":"encodeURI(URI)\nencodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two 'surrogate' characters).\nnew string representing the provided string encoded as a Uniform Resource Identifier (URI).\n"},"decodeURI(encodedURI)":{"prefix":"du","body":["decodeURI(encodedURI)"],"description":"decodeURI(encodedURI)\ndecodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.\nreturn a new string representing the unencoded version of the given encoded Uniform Resource Identifier (URI).\nthrows an URIError ('malformed URI sequence') exception when encodedURI contains invalid character sequences."},"encodeURIComponent(str)":{"prefix":"euc","body":["encodeURIComponent(str)"],"description":"encodeURIComponent(str)\nencodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two 'surrogate' characters).\nreturn a new string representing the provided string encoded as a Uniform Resource Identifier (URI) component."},"decodeURIComponent(encodedURI)":{"prefix":"duc","body":["decodeURIComponent(encodedURI)"],"description":"decodeURIComponent(encodedURI)\ndecodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.\nthrows an URIError ('malformed URI sequence') exception when used wrongly.\n"},"class":{"prefix":"cl","body":["class ${1:name} {\n\tconstructor (${2:params}) {\n\t\t${3}\n\t}\n}"],"description":"class\n"},"class extends":{"prefix":"cle","body":["class ${1:className} extends ${2:baseClassName} {\n\tconstructor (${3:params}) {\n\t\tsuper();\n\t\t${4}\n\t}\n}"],"description":"class extends\n"},"class static":{"prefix":"cls","body":["static ${1:create}(${2:params}) {\n\treturn new ${3:PersonClass}(${2:params});\n}"],"description":"class static\n"},"class constructor":{"prefix":"cons","body":["constructor(${1:params}) {\n\t\t${2}\n\t}"],"description":"class constructor\n"},"get property":{"prefix":"gp","body":["get ${1:propertyName} () {\n\treturn this.${2};\n}"],"description":"getter\n"},"set property":{"prefix":"sp","body":["set ${1:propertyName} (${2:value}) {\n\t${3}\n}"],"description":"setter\n"},"getter and setter":{"prefix":"gs","body":["get ${0:property} () {\n\t${1}\n}\n\nset ${2:property} (${3:value}) {\n\t${4}\n}"],"description":"getter and setter\n"},"method":{"prefix":"m","body":["${1:method} (${2:params}) {\n\t${3}\n}"],"description":"method\n"},"async method":{"prefix":"asm","body":["async ${1:method}(${2:params}) {\n\t${3}\n}"],"description":"async method\n"},"prototype constructor":{"prefix":"proc","body":["var ${1:Constructor} = function(${2:params}) {\n\t${3}\n};"],"description":"prototypal constructor\n"},"prototype method":{"prefix":"prom","body":["${1:Constructor}.prototype.${2:method} = function (${3:params}) {\n\t${4}\n};"],"description":"prototype method\n"},"module as class (CommonJS)":{"prefix":"ec","body":["class ${1:name} {\n\tconstructor (${2:params}) {\n\t\t${3}\n\t}\n}\n\nmodule.exports = ${1:name}\n"],"description":"exports.member (CommonJS)\n"},"exports.member (CommonJS)":{"prefix":"em","body":["exports.${1:member} = ${2:value}"],"description":"exports.member (CommonJS)\n"},"module.exports (CommonJS)":{"prefix":"me","body":["module.exports = ${1:name}"],"description":"module.exports (CommonJS)\n"},"require (CommonJS)":{"prefix":"rq","body":["require('${1:module}')"],"description":"require (CommonJS)\n"},"require assignment (CommonJS)":{"prefix":"crq","body":["const ${1:module} = require('${1:module}');"],"description":"require assignment (CommonJS)\n"},"console.dir":{"prefix":"cd","body":["console.dir($1);"],"description":"console.dir\n"},"console.error":{"prefix":"ce","body":["console.error($1);"],"description":"console.error\n"},"console.error labeled":{"prefix":"celb","body":["console.error('${1}', ${1});"],"description":"console.error labeled\n"},"console.info":{"prefix":"ci","body":["console.info($1);"],"description":"console.info\n"},"console.log":{"prefix":"clg","body":["console.log($1);"],"description":"console.log\n"},"console.log labeled":{"prefix":"clgl","body":["console.log('${1}', ${1});"],"description":"console.log labeled\n"},"console.warn":{"prefix":"cw","body":["console.warn($1);"],"description":"console.warn\n"},"console.warn labeled":{"prefix":"cwl","body":["console.warn('${1}', ${1});"],"description":"console.warn labeled\n"},"console.assert":{"prefix":"ca","body":["console.assert(${1:expression}, ${2:object});"],"description":"console.assert\n"},"console.clear":{"prefix":"cc","body":["console.clear();"],"description":"console.clear\n"},"console.count":{"prefix":"cco","body":["console.count(${1:label});"],"description":"console.count\n"},"console.group":{"prefix":"cg","body":["console.group(\"${1:label}\");"],"description":"console.group\n"},"console.groupEnd":{"prefix":"cge","body":["console.groupEnd();"],"description":"console.groupEnd\n"},"console.table":{"prefix":"ct","body":["console.table(${1:object});"],"description":"console.table\n"},"console.trace":{"prefix":"ctr","body":["console.trace(${1:object});"],"description":"console.trace\n"},"use strict":{"prefix":"us","body":["'use strict';"],"description":"use strict\n"},"const":{"prefix":"c","body":["const ${1:name} = ${2:value};"],"description":"const assignment\n"},"const awaited":{"prefix":"caw","body":["const ${1:name} = await ${2:value};"],"description":"const assignment awaited\n"},"const yielded":{"prefix":"cy","body":["const ${1:name} = yield ${2:value};"],"description":"const assignment yielded\n"},"const destructing object":{"prefix":"cdo","body":["const {${2}} = ${1};"],"description":"const assignment destructuring\n"},"const destructing array":{"prefix":"cda","body":["const [${2}] = ${1};"],"description":"const assignment destructuring\n"},"let":{"prefix":"l","body":["let ${1:name} = ${2:value};"],"description":"let assignment\n"},"let awaited":{"prefix":"law","body":["let ${1:name} = await ${2:value};"],"description":"let assignment awaited\n"},"let yielded":{"prefix":"ly","body":["let ${1:name} = yield ${2:value};"],"description":"let assignment yielded\n"},"let destructing object":{"prefix":"ldo","body":["let {${2}} = ${1};"],"description":"let assignment destructuring\n"},"let destructing array":{"prefix":"lda","body":["let [${2}] = ${1};"],"description":"let assignment destructuring\n"},"var":{"prefix":"v","body":["var ${1:name} = ${2:value};"],"description":"var assignment\n"},"var destructing object":{"prefix":"vdo","body":["var {${2}} = ${1};"],"description":"var destructuring assignment\n"},"var destructing array":{"prefix":"vda","body":["var [${2}] = ${1};"],"description":"var destructuring assignment\n"},"destructuring parameter":{"prefix":"dp","body":["{${0}}: ${1:parameter}"],"description":"destructuring parameter\n"},"getElementById":{"prefix":"gi","body":["${1:document}.getElementById('${2:id}');"],"description":"getElementById\n"},"getElementsByClassName":{"prefix":"gc","body":["${1:document}.getElementsByClassName('${2:class}');"],"description":"getElementsByClassName\n"},"getElementsByTagName":{"prefix":"gt","body":["${1:document}.getElementsByTagName('${2:tag}');"],"description":"getElementsByTagName\n"},"querySelector":{"prefix":"qs","body":["${1:document}.querySelector('${2:selector}');"],"description":"querySelector\n"},"querySelectorAll":{"prefix":"qsa","body":["${1:document}.querySelectorAll('${2:selector}');"],"description":"querySelectorAll\n"},"createDocumentFragment":{"prefix":"cdf","body":["${1:document}.createDocumentFragment();$2"],"description":"createDocumentFragment\n"},"createElement":{"prefix":"cel","body":["${1:document}.createElement(${2:elem});"],"description":"createElement\n"},"getAttribute":{"prefix":"ga","body":["${1:document}.getAttribute('${2:attr}');"],"description":"getAttribute\n"},"setAttribute":{"prefix":"sa","body":["${1:document}.setAttribute('${2:attr}', ${3:value});"],"description":"setAttribute\n"},"removeAttribute":{"prefix":"ra","body":["${1:document}.removeAttribute('${2:attr}');"],"description":"removeAttribute\n"},"appendChild":{"prefix":"ac","body":["${1:document}.appendChild(${2:elem});"],"description":"appendChild\n"},"removeChild":{"prefix":"rc","body":["${1:document}.removeChild(${2:elem});"],"description":"removeChild\n"},"innerHTML":{"prefix":"ih","body":["${1:document}.innerHTML = '${2:elem}';"],"description":"innerHTML\n"},"textContent":{"prefix":"tco","body":["${1:document}.textContent = '${2:content}';"],"description":"textContent\n"},"classList.add":{"prefix":"cla","body":["${1:document}.classList.add('${2:class}');"],"description":"classList.add\n"},"classList.contains":{"prefix":"clc","body":["${1:document}.classList.contains('${2:class}');"],"description":"classList.contains\n"},"classList.remove":{"prefix":"clr","body":["${1:document}.classList.remove('${2:class}');"],"description":"classList.remove\n"},"classList.toggle":{"prefix":"clt","body":["${1:document}.classList.toggle('${2:class}');"],"description":"classList.toggle\n"},"addEventListener":{"prefix":"ael","body":["${1:document}.addEventListener('${2:event}', function (e) {\n\t${3}\n});\n"],"description":"addEventListener\n"},"addEventListener arrow function":{"prefix":"aela","body":["${1:document}.addEventListener('${2:event}', ${3:ev} => {\n\t${4}\n});\n"],"description":"addEventListener, arrow function\n"},"removeEventListener":{"prefix":"rel","body":["${1:document}.removeEventListener('${2:event}', ${3:listener});\n"],"description":"removeEventListener\n"},"event cancel default and propagation":{"prefix":"evc","body":["event.preventDefault();\nevent.stopPropagation();\nreturn false;"],"description":"ev.preventDefault(); ev.stopPropagation()\n"},"event preventDefault":{"prefix":"epd","body":["event.preventDefault();"],"description":"event preventDefault\n"},"event stopPropagation":{"prefix":"esp","body":["event.stopPropagation();"],"description":"event stopPropagation\n"},"function named":{"prefix":"fn","body":["function ${1:name} (${2:params}) {\n\t${3}\n}\n"],"description":"function named\n"},"function anonymous":{"prefix":"fna","body":["function (${1:params}) {\n\t${2}\n}"],"description":"function anonymous\n"},"function expression(var)":{"prefix":"vfn","body":["var ${1:name} = function (${2:params}) {\n\t${3}\n}\n"],"description":"function expression(var)\n"},"function expression(let)":{"prefix":"lfn","body":["let ${1:name} = function (${2:params}) {\n\t${3}\n}\n"],"description":"function expression(let)\n"},"function expression(const)":{"prefix":"cfn","body":["const ${1:name} = function (${2:params}) {\n\t${3}\n}\n"],"description":"function expression(const)\n"},"function property":{"prefix":"fnp","body":["${1:name}: function(${2:params}) {\n\t${3}\n}"],"description":"function as a property of an object\n"},"function apply":{"prefix":"fnapply","body":["${1:method}.apply(${2:context}, [${3:params}]);"],"description":"function.apply(thisArg, [argsArray])\n"},"function call":{"prefix":"fncall","body":["${1:method}.call(${2:context}, ${3:params});"],"description":"function.call(thisArg, arg1, arg2, ...)\n"},"function bind":{"prefix":"fnbind","body":["${1:method}.bind(${2:this});"],"description":"function.bind(thisArg[, arg1[, arg2[, ...]]])\n"},"arrow function":{"prefix":"af","body":["(${1:params}) => {\n\t${2}\n}\n"],"description":"arrow function"},"arrow function with return":{"prefix":"afr","body":["(${1:params}) => {\n\treturn ${2}\n}\n"],"description":"arrow function with return\n"},"arrow function with destructuring":{"prefix":"afd","body":["({${1:params}}) => ${2:statement}\n"],"description":"arrow function with destructuring\n"},"arrow function expression(let)":{"prefix":"laf","body":["let ${1:name} = (${2:params}) => {\n\t${3}\n}\n"],"description":"arrow function expression(let)\n"},"arrow function expression(const)":{"prefix":"caf","body":["const ${1:name} = (${2:params}) => {\n\t${3}\n}\n"],"description":"arrow function expression(const)\n"},"iife, arrow function":{"prefix":"iif","body":[";((${1:params}) => {\n\t${3}\n})(${2})\n"],"description":"immediately-invoked function expression (IIFE)\n"},"iife":{"prefix":"iife","body":[";(function (${1:params}) {\n\t${3}\n})(${2})\n"],"description":"immediately-invoked function expression (IIFE)\n"},"new.target":{"prefix":"nt","body":["if (typeof new.target === 'undefined') {\n\tthrow new Error('Fn() must be called with new');\n}"]},"generator function":{"prefix":"gf","body":["function* ${1:name}(${2:params}) {\n\t${3:yield} ;\n}\n"],"description":"Creates generator function\n"},"yield":{"prefix":"y","body":["yield ${1:expression};"],"description":"The yield keyword is used to pause and resume a generator function (function* or legacy generator function).\n"},"yield*":{"prefix":"yg","body":["yield* ${1:expression};"],"description":"The yield* expression is used to delegate to another generator or iterable object."},"import individual features":{"prefix":"im","body":["import { ${2:moduleName} } from '${1:module}';"],"description":"Import individual features\n"},"import default export":{"prefix":"imd","body":["import ${2:moduleName} from '${1:module}';"],"description":"Import default export\n"},"import renamed exports":{"prefix":"imas","body":["import { ${2:originalName} as ${3:alias} } from '${1:module}';"],"description":"Import renamed exports\n"},"import all module as alias":{"prefix":"imall","body":["import * as ${2:alias} from '${1:module}';"],"description":"Import all of a module's exports as a module object\n"},"import without module name":{"prefix":"imn","body":["import '${1:module}';"],"description":"Import a module for side effects only\n"},"export":{"prefix":"ex","body":["export {${1:nameN}};"],"description":"*export list\n"},"export renaming":{"prefix":"exas","body":["export {${1:variable} as ${2:name}};"],"description":"*renaming exports as\n"},"export let":{"prefix":"exl","body":["export let ${1:name} = ${2:value};"],"description":"*exporting individual features(let)\n"},"export const":{"prefix":"exc","body":["export const ${1:name} = ${2:value};"],"description":"exporting individual features(const)\n"},"export function":{"prefix":"exfn","body":["export function ${1:name} (){\n\t${2};\n}"],"description":"exporting individual features(function)\n"},"export named arrow function":{"prefix":"exafn","body":["export const ${1:name} = (${2:params}) => {\n\t$3\n};"],"description":"export named arrow function\n"},"export default":{"prefix":"exd","body":["export default ${1:expression};"],"description":"*export default\n"},"export as default":{"prefix":"exdas","body":["export {${1:name} as default};"],"description":"export as default\n"},"export class":{"prefix":"exdc","body":["export default class ${1:className} {\n\tconstructor (${2:params}) {\n\t\t${3}\n\t}\n}\n"],"description":"export class\n"},"export class extends":{"prefix":"exdce","body":["export default class ${1:className} extends ${2:baseClassName} {\n\tconstructor (${3:params}) {\n\t\tsuper();\n\t\t${4}\n\t}\n}"],"description":"export class extends\n"},"export default arrow function":{"prefix":"exdaf","body":["export default (${1:params}) => {\n\t${2}\n}\n"],"description":"export default arrow function\n"},"export default function":{"prefix":"exdfn","body":["export default function ${1:name} (${2:params}) {\n\t${3}\n}\n"],"description":"export default function\n"},"export from":{"prefix":"exfr","body":["export {${1:default}} from ${2:otherModule};"],"description":"*aggregating modules, export from\n"},"export all from other module":{"prefix":"exallo","body":["export * from ${1:otherModule};"],"description":"export all from other module\n"},"Number​.EPSILON":{"prefix":"ne","body":["Number.EPSILON"],"description":"Number.EPSILON = Math.pow(2, -52);\n"},"Number​.MAX_SAFE_INTEGER":{"prefix":"nmasi","body":["Number​.MAX_SAFE_INTEGER"],"description":"Number.MAX_SAFE_INTEGER = 9007199254740991; // Math.pow(2, 53) - 1;\n"},"Number​.MAX_VALUE":{"prefix":"nmav","body":["Number.MAX_VALUE"],"description":"The MAX_VALUE property has a value of approximately 1.79E+308, or 21024. Values larger than MAX_VALUE are represented as Infinity.\n"},"Number​.MIN_SAFE_INTEGER":{"prefix":"nmisi","body":["Number​.MIN_SAFE_INTEGER"],"description":"Number.MIN_SAFE_INTEGER = -9007199254740991; // -(Math.pow(2, 53) - 1)\n"},"Number​.MIN_VALUE":{"prefix":"nmav","body":["Number​.MIN_VALUE"],"description":"The MIN_VALUE property is the number closest to 0, not the most negative number, that JavaScript can represent.\nMIN_VALUE has a value of approximately 5e-324. Values smaller than MIN_VALUE ('underflow values') are converted to 0.\n"},"Number​.NEGATIVE_INFINITY":{"prefix":"nni","body":["Number​.NEGATIVE_INFINITY"],"description":"represents the negative Infinity value.\n"},"Number​.NaN":{"prefix":"nn","body":["Number​.NaN"],"description":"represents Not-A-Number. Equivalent of **NaN**.\n"},"Number​.POSITIVE_INFINITY":{"prefix":"npi","body":["Number​.POSITIVE_INFINITY"],"description":"represents the positive Infinity value.\n"},"Number​.isFinite()":{"prefix":"nif","body":["Number​.isFinite(${1:value})"],"description":"return a Boolean indicating whether or not the given value is a finite number.\n"},"Number​.isInteger()":{"prefix":"nii","body":["Number​.isInteger(${1:value})"],"description":"return a Boolean indicating whether or not the given value is an integer.\n"},"Number​.isNaN()":{"prefix":"nin","body":["Number​.isNaN(${1:value})"],"description":"return **true** if the given value is NaN and its type is Number; otherwise, **false**.\n"},"Number​.isSafe​Integer()":{"prefix":"nisi","body":["Number​.isSafe​Integer(${1:value})"],"description":"return a Boolean indicating whether or not the given value is a number that is a safe integer.\n"},"Number​.parse​Float()":{"prefix":"npf","body":["Number​.parse​Float(${1:string})"],"description":"parses a string argument and returns a floating point number.\n"},"Number​.parseInt()":{"prefix":"npi","body":["Number​.parseInt(${1:string})"],"description":"Number.parseInt(string,[ radix])\nparses a string argument and returns an integer of the specified radix or base.\n"},"number.toExponential()":{"prefix":"nte","body":["number.toExponential()"],"description":"number.toExponential([fractionDigits])\nreturn a string representing the Number object in exponential notation.\n"},"number.toFixed()":{"prefix":"ntf","body":["number.toFixed()"],"description":"numObj.toFixed([digits])\nformats a number using fixed-point notation.\n"},"number.toPrecision()":{"prefix":"ntp","body":["number.toPrecision()"],"description":"number.toPrecision([precision])\nreturn a string representing the Number object to the specified precision."},"object literal":{"prefix":"ol","body":["{\n\t${1:key}: ${2:value}\n }"],"description":"object literal\n"},"key/value pair":{"prefix":"kv","body":["${1:key}: ${2:value},"],"description":"key/value pair\n"},"Object.assign":{"prefix":"oa","body":["Object.assign(${1:target}, ${2:source});"],"description":"Object.assign(target, ...sources);\nreturn the target object.\n"},"Object.create":{"prefix":"oc","body":["Object.create(${1:obj});"],"description":"Object.create(proto, [propertiesObject]);\nreturn a new object with the specified prototype object and properties.\nA TypeError exception if the propertiesObject parameter is 'null' or a non-primitive-wrapper object.\n"},"Object.defineProperty(data descriptors)":{"prefix":"odp","body":["Object.defineProperty(${1:dest}, '${2:propertyName}', {\n\t${3:value}: ${4:undefined},\n\t${5:configurable}: ${6:false},\n\t${7:enumerable}: ${8:false},\n\t${9:writable}: ${10:false}\n})"],"description":"Object.defineProperties(obj, props)\ndata descriptors\ndefines new or modifies existing properties directly on an object, \nreturning the object.\n"},"Object.defineProperty(accessor descriptors)":{"prefix":"odpa","body":["Object.defineProperty(${1:dest}, '${2:propertyName}', {\n\tget() {\n\t\treturn ${3:value};\n\t},\n\tset(${4:newValue}) {\n\t\t${5:value} = ${4:newValue};\n\t},\n\tenumerable: ${6:false},\n\tconfigurable: ${7:false}\n})"],"description":"Object.defineProperties(obj, props)\naccessor descriptors\ndefines new or modifies existing properties directly on an object, \nreturning the object.\n"},"Object.defineProperties":{"prefix":"odps","body":["Object.defineProperties(${1:dest}, {\n\t${2:propertyName}: {\n\t\tconfigurable: ${3:false},\n\t\tenumerable: ${4:false}\n\t\tvalue: ${5:undefined},\n\t\twritable: ${6:false}\n\t},\n\t${7:propertyName}: {\n\t\tget() {\n\t\t\treturn ${8:value};\n\t\t},\n\t\tset(${9:newValue}) {\n\t\t\t${10:value} = ${9:newValue};\n\t\t}\n\t\tenumerable: ${11:false},\n\t\tconfigurable: ${12:false}\n\t}\n});"],"description":"Object.defineProperties(obj, props)\ndefines new or modifies existing properties directly on an object, \nreturning the object.\n"},"Object.entries":{"prefix":"oe","body":["Object.entries(${1:obj});"],"description":"Object.entries(obj);\nreturn an array of a given object's own enumerable string-keyed property [key, value] pairs.\n"},"Object.freeze":{"prefix":"of","body":["Object.freeze(${1:obj});"],"description":"Object.freeze(obj);\nreturn the same object that was passed in.\n"},"Object.fromEntries":{"prefix":"ofe","body":["Object.fromEntries(${1:iterable});"],"description":"Object.fromEntries(iterable);\ntransforms a list of key-value pairs into an object.\n"},"Object.getOwnPropertyDescriptor":{"prefix":"ogopd","body":["Object.getOwnPropertyDescriptor(${1:obj}, '${2:propertyName}');"],"description":"Object.getOwnPropertyDescriptor(obj, propertyName);\nreturn a property descriptor of the given property if it exists on the object, 'undefined' otherwise.\n"},"Object.getOwnPropertyDescriptors":{"prefix":"ogopds","body":["Object.getOwnPropertyDescriptors(${1:obj});"],"description":"Object.getOwnPropertyDescriptors(obj);\nreturn an object containing all own property descriptors of an object. Might be an empty object, if there are no properties.\n"},"Object.getOwnPropertyNames":{"prefix":"ogopn","body":["Object.getOwnPropertyNames(${1:obj});"],"description":"Object.getOwnPropertyNames(obj);\nreturn an array of all properties (including non-enumerable properties except for those which use Symbol) found directly in a given object.\n"},"Object.getOwnPropertySymbols":{"prefix":"ogops","body":["Object.getOwnPropertySymbols(${1:obj});"],"description":"Object.getOwnPropertySymbols(obj);\nreturn an array of all symbol properties found directly upon a given object.\n"},"Object.getPrototypeOf":{"prefix":"ogpo","body":["Object.getPrototypeOf(${1:obj});"],"description":"Object.getPrototypeOf(obj);\nreturn the prototype of the given object. If there are no inherited properties, 'null' is returned.\n"},"Object.is":{"prefix":"oi","body":["Object.is(${1:value1}, ${2:value2});"],"description":"Object.is(value1, value2);\ndetermines whether two values are the same value\n"},"Object.isExtensible":{"prefix":"oie","body":["Object.isExtensible(${1:obj});"],"description":"Object.isExtensible(obj);\ndetermines if an object is extensible (whether it can have new properties added to it).\n"},"Object.isFrozen":{"prefix":"oif","body":["Object.isFrozen(${1:obj});"],"description":"Object.isFrozen(obj);\ndetermines if an object is frozen.\n"},"Object.isSealed":{"prefix":"ois","body":["Object.isSealed(${1:obj});"],"description":"Object.isSealed(obj);\ndetermines if an object is sealed.\n"},"Object.keys":{"prefix":"ok","body":["Object.keys(${1:obj});"],"description":"Object.keys(obj);\nreturn an array of a given object's own property names, in the same order as we get with a normal loop.\n"},"Object.preventExtensions":{"prefix":"ope","body":["Object.preventExtensions(${1:obj});"],"description":"Object.preventExtensions(obj);\nreturn the object being made non-extensible.\n"},"Object.seal":{"prefix":"os","body":["Object.seal(${1:obj});"],"description":"Object.seal(obj);\nseals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.\nreturn the object being sealed.\n"},"Object.setPrototypeOf":{"prefix":"ospo","body":["Object.setPrototypeOf(${1:obj}, ${2:prototype});"],"description":"Object.setPrototypeOf(obj, prototype);\nreturn the specified object.\n"},"Object.values":{"prefix":"ov","body":["Object.values(${1:obj})"],"description":"Object.values(obj);\nreturn an array of a given object's own enumerable property values, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).\n"},"*obj.hasOwnProperty":{"prefix":"hop","body":["${1:obj}.hasOwnProperty(${2:propertyName});"],"description":"obj.hasOwnProperty(propertyName);\nreturn a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it).\n"},"*prototypeObj.isPrototypeOf":{"prefix":"ipo","body":["${1:prototypeObj}.isPrototypeOf(${2:object});"],"description":"prototypeObj.isPrototypeOf(object);\nreturn a Boolean indicating whether the calling object lies in the prototype chain of the specified object.\nthrown a TypeError is thrown if 'prototypeObj' is 'undefined' or 'null'.\n"},"*obj.propertyIsEnumerable":{"prefix":"pie","body":["${1:obj}.propertyIsEnumerable(${2:propertyName});"],"description":"obj.propertyIsEnumerable(propertyName);\nreturn a Boolean indicating whether the specified property is enumerable.\n"},"*obj.toLocaleString":{"prefix":"tls","body":["${1:obj}.toLocaleString();"],"description":"obj.toLocaleString();\n"},"*obj.toString":{"prefix":"ts","body":["${1:obj}.toString();"],"description":"obj.toString();\n"},"*obj.valueOf":{"prefix":"vo","body":["${1:obj}.valueOf();"],"description":"obj.valueOf();\n returns the primitive value of a **Objects** object\n"},"new Promise":{"prefix":"p","body":["let ${1:promise} = new Promise((resolve, reject) => {\n\t${2}\n});\n\n${1:promise}.then(${3:result} => {\n\t${4}\n}).catch(${5:error} => {\n\t${6}\n});\n"],"description":"Promise\n"},"Promise.all":{"prefix":"pa","body":["Promise.all([${1:value}]);\n"],"description":"Promise.all\n"},"Promise.reject":{"prefix":"prj","body":["Promise.reject(${1:value});\n"],"description":"Promise.reject\n"},"resolve":{"prefix":"rs","body":["resolve(${1:value});\n"],"description":"resolve()\n"},"reject":{"prefix":"rj","body":["reject(${1:err});\n"],"description":"reject()\n"},"Promise.resolve":{"prefix":"prs","body":["Promise.resolve(${1:value});\n"],"description":"Promise.resolve\n"},"Promise.catch":{"prefix":"pc","body":["${1:promise}.catch(error => {\n\t${2}\n});\n"],"description":"promise.catch\n"},"Promise.finally":{"prefix":"pf","body":["${1:promise}.finally(() => {\n\t${2}\n});\n"],"description":"promise.finally\n"},"Promise.then":{"prefix":"pt","body":["${1:promise}.then(${2:result} => {\n\t${3}\n})"],"description":"promise.then\n"},"Promise.then.catch":{"prefix":"ptc","body":["${1:promise}.then(${2:result} => {\n\t${3}\n}).catch(${4:error} => {\n\t${5}\n});"],"description":"promise.then.catch\n"},"Promise.then.catch.finally":{"prefix":"ptcf","body":["${1:promise}.then(${2:result} => {\n\t${3}\n}).catch(${4:error} => {\n\t${5}\n}).finally(() => {\n\t${6}\n});\n"],"description":"Promise.then.catch.finally\n"},"return promise":{"prefix":"rp","body":["return new Promise((resolve, reject) => {\n\t${1}\n})"],"description":"return a new Promise\n"},"RegExp(pattern[, flags])":{"prefix":"re","body":["let ${1:regex1} = RegExp('${2:pattern}');"],"description":"RegExp(pattern[, flags])"},"/pattern/flags":{"prefix":"rep","body":["let ${1:regex1} = /${2:pattern}/;"],"description":"/pattern/flags"},"regexObj.exec(str)":{"prefix":"ree","body":["let ${1:regex1} = RegExp('${2:pattern}');\nlet ${3:result} = ${1:regex1}.exec(${4:str});"],"description":"regexObj.exec(str)\nexecutes a search for a match in a specified string.\nreturn a result array, or **null**."},"regexObj.test(str)":{"prefix":"ret","body":["let ${1:regex1} = RegExp('${2:pattern}');\nlet ${3:result} = ${1:regex1}.test(${4:str});"],"description":"regexObj.test(str)\nexecutes a search for a match between a regular expression and a specified string. \nreturn **true** or **false**."},"if":{"prefix":"if","body":["if (${1:condition}) {\n\t${2}\n}"],"description":"if statement \n"},"if/else":{"prefix":"ife","body":["if (${1:condition}) {\n\t${2}\n} else {\n\t${3}\n}"],"description":"if/else statement \n"},"else if":{"prefix":"ei","body":["else if (${1:condition}) {\n\t${2}\n}"],"description":"else if statement \n"},"else":{"prefix":"el","body":["else {\n\t${1}\n}"],"description":"else statement \n"},"switch":{"prefix":"swi","body":["switch (${1}) {\n\tcase ${2} :\n\t\t${3}\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n}"],"description":"switch statement\n"},"case":{"prefix":"cas","body":["case ${1} :\n\t${2}\n\t\tbreak;"],"description":"switch's case statement \n"},"for-in":{"prefix":"fin","body":["for (let ${1:key} in ${2:object}) {\n\tif (${2:object}.hasOwnProperty(${1:key})) {\n\t\t${3}\n\t}\n}"],"description":"Iterating over property values of iterable objects\n"},"for-of":{"prefix":"fof","body":["for (let ${1:item} of ${2:object}) {\n\t${3}\n}"],"description":"Iterating over property names of iterable objects\n"},"for loop iterable":{"prefix":"fl","body":["for (let ${1:i} = 0, ${2:len} = ${3:iterable}.length; ${1:i} < ${2:len}; ${1:i}++) {\n\t${4}\n}"],"description":"for loop iterable\n"},"for loop iterable(reverse)":{"prefix":"flr","body":["for (let ${1:len} = ${2:iterable}.length - 1; ${1:len} >= 0; ${1:len}--) {\n\t${3}\n}"],"description":"reverse for loop iterable\n"},"while iteration":{"prefix":"wh","body":["while (${1:condition}) {\n\t${2}\n}"],"description":"while iteration\n"},"while iteration decrementing":{"prefix":"whi","body":["let ${1:iterable}Index = ${1:array}.length\nwhile (${1:iterableIndex}Index--) {\n\t${2}\n}"],"description":"while iteration decrementing\n"},"String.fromCharCode()":{"prefix":"sfcc","body":["String.fromCharCode(${1:numN})"],"description":"String.fromCharCode(num1[, ...[, numN]])\nreturn a string created from the specified sequence of UTF-16 code units.\n"},"String​.from​Code​Point()":{"prefix":"sfcp","body":["String.fromCodePoint(${1:numN})"],"description":"String.fromCodePoint(num1[, ...[, numN]])\nreturn a string created by using the specified sequence of code points.\na RangeError is thrown if an invalid Unicode code point is given (e.g. 'RangeError: NaN is not a valid code point').\n"},"String​.raw()":{"prefix":"sr","body":["String.raw`${1:templateString}`"],"description":"String.raw(callSite, ...substitutions)|String.raw`templateString`\nreturn the raw string form of a given template string.\n"},"str.charAt()":{"prefix":"sca","body":["${1:str}.charAt(${2:index})"],"description":"str.charAt(index)\n returns a new string consisting of the single UTF-16 code unit located at the specified offset into the string.\n"},"str.char​CodeAt()":{"prefix":"scca","body":["${1:str}.charCodeAt(${2:index})"],"description":"str.charCodeAt(index)\nreturn an integer between 0 and 65535 representing the UTF-16 code unit at the given index.\n"},"str.code​PointAt()":{"prefix":"scpa","body":["${1:str}.codePointAt(${2:position})"],"description":"str.codePointAt(pos)\nreturn a non-negative integer that is the Unicode code point value.\n"},"str.concat()":{"prefix":"sc","body":["${1:str}.concat(${2:stringN})"],"description":"str.concat(string2[, string3, ..., stringN])\nreturn a new string containing the combined text of the strings provided.\n"},"str.ends​With()":{"prefix":"sew","body":["${1:str}.endsWith(${2:searchString})"],"description":"str.endsWith(searchString[, length])\nreturn 'true' if the given characters are found at the end of the string; otherwise, 'false'.\n"},"str.includes()":{"prefix":"sin","body":["${1:str}.includes(${2:searchString})"],"description":"str.includes(searchString[, position])\nreturn 'true' if the search string is found anywhere within the given string; otherwise, 'false' if not.\n"},"str.indexOf()":{"prefix":"sio","body":["${1:str}.indexOf(${2:searchValue})"],"description":"str.indexOf(searchValue[, fromIndex])\nreturn the index of the first occurrence of searchValue, or '-1' if not found.\nAn empty string searchValue will match at any index between '0' and str.length\n"},"str.last​IndexOf()":{"prefix":"slio","body":["${1:str}.lastIndexOf(${2:searchValue})"],"description":"str.lastIndexOf(searchValue[, fromIndex])\nreturn the index of the last occurrence of the specified value; '-1' if not found.\n"},"str.locale​Compare()":{"prefix":"slc","body":["${1:str}.localeCompare(${2:compareString})"],"description":"referenceStr.localeCompare(compareString[, locales[, options]])\nreturn a **negative** number if the reference string occurs before the compare string; **positive** if the reference string occurs after the compare string; **0** if they are equivalent.\n"},"str.match()":{"prefix":"sm","body":["${1:str}.match(${2:regexp})"],"description":"str.match(regexp)\nreturn an **Array** whose contents depend on the presence or absence of the global (**g**) flag, or **null** if no matches are found.\n"},"str.matchAll()":{"prefix":"sma","body":["${1:str}.matchAll(${2:regexp})"],"description":"str.matchAll(regexp)\nreturn an iterator of all results matching a string against a regular expression, including capturing groups.\n"},"str.normalize()":{"prefix":"sn","body":["${1:str}.normalize('${2:NFC}')"],"description":"str.normalize([form])\n**form**\n- NFC — Normalization Form Canonical Composition.\n- NFD — Normalization Form Canonical Decomposition.\n- NFKC — Normalization Form Compatibility Composition.\n- NFKD — Normalization Form Compatibility Decomposition.\nreturn the Unicode Normalization Form of a given string (if the value isn't a string, it will be converted to one first).\n thrown a **RangeError** is thrown if **form** isn't one of the values specified above.\n"},"str.padEnd()":{"prefix":"spe","body":["${1:str}.padEnd(${2:targetLength}, ${3:padString})"],"description":"str.padEnd(targetLength [, padString])\nreturn a **String** of the specified length with the pad string applied at the end of the current string.\n"},"str.pad​Start()":{"prefix":"sps","body":["${1:str}.padStart(${2:targetLength}, ${3:padString})"],"description":"str.padStart(targetLength [, padString])\nreturn a **String** of the specified length with the pad string applied from the start.\n"},"str.repeat()":{"prefix":"sr","body":["${1:str}.repeat(${2:count})"],"description":"str.repeat(count)\nreturn a new string containing the specified number of copies of the given string.\n"},"str.replace()":{"prefix":"sre","body":["${1:str}.replace(${2:regexp}, ${3:newSubStr})"],"description":"str.replace(regexp|substr, newSubStr|function)\nreturn a new string with some or all matches of a **pattern** replaced by a **replacement**. The **pattern** can be a string or a **RegExp**, and the **replacement** can be a string or a function to be called for each match. If **pattern** is a string, only the first occurrence will be replaced.\nThe original string is left unchanged.\n"},"str.search()":{"prefix":"ss","body":["${1:str}.search(${2:regexp})"],"description":"str.search(regexp)\nreturn the index of the first match between the regular expression and the given string; if not found, **-1**.\n"},"str.slice()":{"prefix":"ssl","body":["${1:str}.slice(${2:beginIndex}, ${3:endIndex})"],"description":"str.slice(beginIndex[, endIndex])\nreturn a new string containing the extracted section of the string.\n"},"str.split()":{"prefix":"ssp","body":["${1:str}.split(${2:separator})"],"description":"str.split([separator[, limit]])\nreturn an Array of strings split at each point where the separator occurs in the given string.\n"},"str.starts​With()":{"prefix":"ssw","body":["${1:str}.startsWith(${2:searchString}, ${3:position})"],"description":"str.startsWith(searchString[, position])\nreturn **true** if the given characters are found at the beginning of the string; otherwise, **false**.\n"},"str.substring()":{"prefix":"sss","body":["${1:str}.substring(${2:indexStart}, ${3:indexEnd})"],"description":"str.substring(indexStart[, indexEnd])\nreturn the part of the string between the start and end indexes, or to the end of the string.\n"},"str.toLocale​Lower​Case()":{"prefix":"stllc","body":["${1:str}.toLocaleLowerCase()"],"description":"str.toLocaleLowerCase([locale, locale, ...])\nreturn a new string representing the calling string converted to lower case, according to any locale-specific case mappings.\n"},"str.toLocale​Upper​Case()":{"prefix":"stluc","body":["${1:str}.toLocaleUpperCase()"],"description":"str.toLocaleUpperCase([locale, locale, ...])\nreturn a new string representing the calling string converted to upper case, according to any locale-specific case mappings.\n"},"str.toLower​Case()":{"prefix":"stlc","body":["${1:str}.toLowerCase()"],"description":"str.toLowerCase()\nreturn a new string representing the calling string converted to lower case.\n"},"str.toUpper​Case()":{"prefix":"stuc","body":["${1:str}.toUpperCase()"],"description":"str.toUpperCase()\nreturn a new string representing the calling string converted to upper case.\n"},"str.trim()":{"prefix":"str","body":["${1:str}.trim()"],"description":"str.trim()\nreturn a new string representing the calling string stripped of whitespace from both ends.\n"},"str.trimEnd()":{"prefix":"ste","body":["${1:str}.trimEnd()/trimRight()"],"description":"str.trimEnd()/trimRight()\nreturn a new string representing the calling string stripped of whitespace from its (right) end.\n"},"str.trim​Start()":{"prefix":"sts","body":["${1:str}.trimStart()/trimLeft()"],"description":"str.trimStart()/trimLeft()\nreturn a new string representing the calling string stripped of whitespace from its beginning (left end).\n"},"str[@@iterator]()":{"prefix":"ssi","body":["${1:str}[Symbol.iterator]"],"description":"str[Symbol.iterator]\nreturn a new **Iterator** object.\n"},"test suite: describe":{"prefix":"desc","body":["describe('${1:description}', function () {\n\t${2}\n})"],"description":"test suite: describe\n"},"test suite: context":{"prefix":"cont","body":["context('${1:description}', ${2:callback});${0}"],"description":"test suite: context\n"},"test suite: it synchronous":{"prefix":"it","body":["it('${1:description}', () => {\n\t${2}\n})"],"description":"test suite: it synchronous\n"},"test suite: it asynchronous":{"prefix":"ita","body":["it('${1:description}', async (done) => {\n\t${2}\n\tdone();\n});${0}"],"description":"test suite: it asynchronous\n"},"test suite: afterEach":{"prefix":"afe","body":["afterEach(function () {\n\t${1}\n})"],"description":"test suite: afterEach\n"},"test suite: beforeEach":{"prefix":"bfe","body":["beforeEach(function () {\n\t${1}\n})"],"description":"test suite: beforeEach\n"},"test suite: after":{"prefix":"aft","body":["after(function () {\n\t${1}\n})"],"description":"test suite: after\n"},"test suite: before":{"prefix":"bf","body":["before(function () {\n\t${1}\n})"],"description":"test suite: before\n"}}