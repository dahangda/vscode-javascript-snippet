{
  "Number.EPSILON":              { "prefix": "ne",     "body": ["Number.EPSILON"],                    "description": "Number.EPSILON = Math.pow(2, -52);\n"},
  "Number.MAX_SAFE_INTEGER":     { "prefix": "nmasi",  "body": ["Number.MAX_SAFE_INTEGER"],           "description": "Number.MAX_SAFE_INTEGER = 9007199254740991; // Math.pow(2, 53) - 1;\n"},
  "Number.MAX_VALUE":            { "prefix": "nmav",   "body": ["Number.MAX_VALUE"],                  "description": "The MAX_VALUE property has a value of approximately 1.79E+308, or 21024. Values larger than MAX_VALUE are represented as Infinity.\n"},
  "Number.MIN_SAFE_INTEGER":     { "prefix": "nmisi",  "body": ["Number.MIN_SAFE_INTEGER"],           "description": "Number.MIN_SAFE_INTEGER = -9007199254740991; // -(Math.pow(2, 53) - 1)\n"},
  "Number.MIN_VALUE":            { "prefix": "nmav",   "body": ["Number.MIN_VALUE"],                  "description": "The MIN_VALUE property is the number closest to 0, not the most negative number, that JavaScript can represent.\nMIN_VALUE has a value of approximately 5e-324. Values smaller than MIN_VALUE ('underflow values') are converted to 0.\n"},
  "Number.NEGATIVE_INFINITY":    { "prefix": "nni",    "body": ["Number.NEGATIVE_INFINITY"],          "description": "represents the negative Infinity value.\n"},
  "Number.NaN":                  { "prefix": "nn",     "body": ["Number.NaN"],                        "description": "represents Not-A-Number. Equivalent of **NaN**.\n"},
  "Number.POSITIVE_INFINITY":    { "prefix": "npi",    "body": ["Number.POSITIVE_INFINITY"],          "description": "represents the positive Infinity value.\n"},
  "Number.isFinite()":           { "prefix": "nif",    "body": ["Number.isFinite(${1:value})"],       "description": "return a Boolean indicating whether or not the given value is a finite number.\n"},
  "Number.isInteger()":          { "prefix": "nii",    "body": ["Number.isInteger(${1:value})"],      "description": "return a Boolean indicating whether or not the given value is an integer.\n"},
  "Number.isNaN()":              { "prefix": "nin",    "body": ["Number.isNaN(${1:value})"],          "description": "return **true** if the given value is NaN and its type is Number; otherwise, **false**.\n"},
  "Number.isSafeInteger()":      { "prefix": "nisi",   "body": ["Number.isSafeInteger(${1:value})"],  "description": "return a Boolean indicating whether or not the given value is a number that is a safe integer.\n"},
  "Number.parseFloat()":         { "prefix": "npf",    "body": ["Number.parseFloat(${1:string})"],    "description": "parses a string argument and returns a floating point number.\n"},
  "Number.parseInt()":           { "prefix": "npi",    "body": ["Number.parseInt(${1:string})"],      "description": "Number.parseInt(string,[ radix])\nparses a string argument and returns an integer of the specified radix or base.\n"},
  "number.toExponential()":      { "prefix": "nte",    "body": ["number.toExponential()"],            "description": "numObj.toExponential([fractionDigits])\nreturn a string representing the Number object in exponential notation.\n"},
  "number.toFixed()":            { "prefix": "ntf",    "body": ["number.toFixed()"],                  "description": "numObj.toFixed([digits])\nformats a number using fixed-point notation.\n"},
  "number.toPrecision()":        { "prefix": "ntp",    "body": ["number.toPrecision()"],              "description": "numObj.toPrecision([precision])\nreturn a string representing the Number object to the specified precision."}
}