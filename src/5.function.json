{
  "function declaration":                 { "prefix": "fn",       "body": [ "function ${1:name} (${2:params}) {\n\t${3}\n}" ],                "description": "function declaration\n" },
  "function expression(var)":             { "prefix": "vfn",      "body": [ "var ${1:name} = function (${2:params}) {\n\t${3}\n}" ],       "description": "function expression(var)\n" },
  "function expression(let)":             { "prefix": "lfn",      "body": [ "let ${1:name} = function (${2:params}) {\n\t${3}\n}" ],       "description": "function expression(let)\n" },
  "function expression(const)":           { "prefix": "cfn",      "body": [ "const ${1:name} = function (${2:params}) {\n\t${3}\n}" ],     "description": "function expression(const)\n" },
  "function as a property of an object":  { "prefix": "kf",       "body": [ "${1:name}: function(${2:params}) {\n\t${3}\n}" ],                "description": "function as a property of an object\n" },
  "function apply":                       { "prefix": "fnapply",  "body": [ "${1:method}.apply(${2:context}, [${3:params}]);" ],              "description": "function apply\n" },
  "function call":                        { "prefix": "fncall",   "body": [ "${1:method}.call(${2:context}, ${3:params});" ],                 "description": "function call\n" },
  "function bind":                        { "prefix": "fnbind",   "body": [ "${1}.bind(${2:this})${3}" ],                                     "description": "function bind\n" },
  "anonymous arrow function":             { "prefix": "af",       "body": [ "(${1:params}) => {\n\t${2}\n}" ],                                "description": "anonymous arrow function\n" },
  "arrow function with return":           { "prefix": "afr",      "body": [ "(${1:params}) => {\n\treturn ${2}\n}" ],                         "description": "arrow function with return\n" },
  "arrow function with destructuring":    { "prefix": "afd",      "body": [ "({${1:params}}) => ${2:statement}" ],                            "description": "arrow function with destructuring\n" },
  "anonymous function":                   { "prefix": "afn",      "body": [ "function (${1:params}) {${2}}" ],                                "description": "anonymous function\n" },
  "arrow function expression(let)":       { "prefix": "laf",      "body": [ "let ${1:name} = (${2:params}) => {\n\t${3}\n}" ],                "description": "arrow function expression(let)\n" },
  "arrow function expression(const)":     { "prefix": "caf",      "body": [ "const ${1:name} = (${2:params}) => {\n\t${3}\n}" ],              "description": "arrow function expression(const)\n" },
  "generator function":                   { "prefix": "gf",       "body": [ "function* ${1:name}(${2:params}) {\n\t${3}\n}" ],                "description": "Creates generator function\n" },
  "yield":                                { "prefix": "y",        "body": [ "yield ${1}" ] },
  "iife, arrow function":                 { "prefix": "iif",      "body": [ ";((${1:params}) => {\n\t${3}\n})(${2})" ],                       "description": "immediately-invoked function expression (IIFE)\n" },
  "iife":                                 { "prefix": "iife",      "body": [ ";(function (${1:params}) {\n\t${3}\n})(${2})" ],                "description": "immediately-invoked function expression (IIFE)\n" }
}