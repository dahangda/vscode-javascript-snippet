{
  "typeof":                      { "prefix": "to",       "body": [ "typeof ${1:object} === '${2:undefined}'" ],                      "description": "typeof\n" },
  "instanceof":                  { "prefix": "io",       "body": [ "${1:object} instanceof '${2:constructor}'" ],                    "description": "instanceof\n" },
  "setTimeout":                  { "prefix": "st",       "body": [ "setTimeout(function() {\n\t${2}\n}, ${1:delay});" ],             "description": "setTimeout\n" },
  "setTimeOut, arrow function":  { "prefix": "sta",      "body": [ "setTimeout(() => {\n\t${2}\n}, ${1:delay});" ],                  "description": "setTimeOut with arrow function\n" },
  "setInterval":                 { "prefix": "si",       "body": [ "setInterval(function() {\n\t${2}\n}, ${1:interval});" ],         "description": "setInterval\n" },
  "setInterval, arrow function": { "prefix": "sia",      "body": [ "setInterval(() => {\n\t${2}\n}, ${1:interval});" ],              "description": "setInterval with arrow function\n" },
  "JSON.parse()":                { "prefix": "jp",       "body": [ "JSON.parse(${1:obj});" ],                                        "description": "JSON.parse()\n" },
  "JSON.stringify()":            { "prefix": "js",       "body": [ "JSON.stringify(${1:obj});" ],                                    "description": "JSON.stringify()\n" },
  "try/catch":                   { "prefix": "tc",       "body": [ "try {\n\t${1}\n} catch (${2:err}) {\n\t\n}" ],                   "description": "try/catch\n" },
  "try/catch/finally":           { "prefix": "tcf",      "body": [ "try {\n\t${1}\n} catch (${2:err}) {\n\t\n} finally {\n\t\n}" ],  "description": "try/catch/finally\n" },
  "try/finally":                 { "prefix": "tf",       "body": [ "try {\n\t${1}\n} finally {\n\t\n}" ],                            "description": "try/finally\n" },
  "throw new Error":             { "prefix": "tne",      "body": [ "throw new ${1:error}" ],                                         "description": "throw new Error\n" },
  "return":                      { "prefix": "r",        "body": [ "return ${1};" ],                                                 "description": "return\n" },
  "return null":                 { "prefix": "rn",       "body": [ "return null;" ],                                                 "description": "return null\n" },
  "return this":                 { "prefix": "rt",       "body": [ "return this;" ],                                                 "description": "return this\n" },
  "return new object":           { "prefix": "ro",       "body": [ "return {\n\t${0}\n};" ],                                         "description": "return new object\n" },
  "ternary operator":            { "prefix": "ternary",  "body": [ "${1} ? ${2} : ${3};" ],                                          "description": "ternary operator\n" },
  "alert":                       { "prefix": "al",       "body": [ "alert('${1:msg}');" ],                                           "description": "window.alert\n" },
  "confirm":                     { "prefix": "conf",     "body": [ "confirm('${1:msg}');" ],                                         "description": "window.confirm\n" },
  "prompt":                      { "prefix": "pm",       "body": [ "prompt('${1:msg}');" ],                                          "description": "window.prompt\n" },
  "debugger":                    { "prefix": "de",       "body": [ "debugger;" ],                                                    "description": "debugger\n" },
  "encodeURI(URI)":                  { "prefix": "eu",   "body": [ "encodeURI(URI)" ],                                               "description": "encodeURI(URI)\nencodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two 'surrogate' characters).\nnew string representing the provided string encoded as a Uniform Resource Identifier (URI).\n" },
  "decodeURI(encodedURI)":           { "prefix": "du",   "body": [ "decodeURI(encodedURI)" ],                                        "description": "decodeURI(encodedURI)\ndecodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.\nreturn a new string representing the unencoded version of the given encoded Uniform Resource Identifier (URI).\nthrows an URIError ('malformed URI sequence') exception when encodedURI contains invalid character sequences." },
  "encodeURIComponent(str)":         { "prefix": "euc",  "body": [ "encodeURIComponent(str)" ],                                      "description": "encodeURIComponent(str)\nencodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two 'surrogate' characters).\nreturn a new string representing the provided string encoded as a Uniform Resource Identifier (URI) component." },
  "decodeURIComponent(encodedURI)":  { "prefix": "duc",  "body": [ "decodeURIComponent(encodedURI)" ],                               "description": "decodeURIComponent(encodedURI)\ndecodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.\nthrows an URIError ('malformed URI sequence') exception when used wrongly.\n" }

}