{
  "createDocumentFragment":   { "prefix": "cdf",      "body": [ "${1:document}.createDocumentFragment();$2" ],                    "description": "Creates a new document fragment.\n" },
  "createElement":            { "prefix": "cel",      "body": [ "${1:document}.createElement(${2:elem});" ],                      "description": "Creates a new element with the given tag name.\n" },
  "createTextNode":           { "prefix": "ctn",      "body": [ "${1:document}.createTextNode(${2:data});" ],                     "description": "Creates a text node.\n" },
  "getElementById":           { "prefix": "gi",       "body": [ "${1:document}.getElementById('${2:id}');" ],                 "description": "getElementById\n" },
  "getElementsByClassName":   { "prefix": "gc",       "body": [ "${1:document}.getElementsByClassName('${2:className}');" ],  "description": "getElementsByClassName\n" },
  "getElementsByTagName":     { "prefix": "gt",       "body": [ "${1:document}.getElementsByTagName('${2:tagName}');" ],      "description": "getElementsByTagName\n" },
  "querySelector":            { "prefix": "qs",       "body": [ "${1:document}.querySelector('${2:selector}');" ],            "description": "querySelector\n" },
  "querySelectorAll":         { "prefix": "qsa",      "body": [ "${1:document}.querySelectorAll('${2:selector}');" ],         "description": "querySelectorAll\n" },


  "childNodes":               { "prefix": "cn",       "body": [ "const ${2:nodeList} = ${1:node}.childNodes;" ],                  "description": "Returns a live NodeList containing all the children of this node. \n" },
  "parentElement":            { "prefix": "pe",       "body": [ "const ${2:parentElement} = ${1:node}.parentElement;" ],          "description": "Returns an Element that is the parent of this node. If the node has no parent, or if that parent is not an Element, this property returns null. \n" },
  "parentNode":               { "prefix": "pn",       "body": [ "const ${2:parentNode} = ${1:node}.parentNode;" ],                 "description": "Returns a Node that is the parent of this node. \n" },
  "firstChild":               { "prefix": "fc",       "body": [ "const ${2:childNode} = ${1:node}.firstChild;" ],                 "description": "Returns a Node representing the first direct child node of the node, or null if the node has no child.\n" },
  "lastChild":                { "prefix": "lc",       "body": [ "const ${2:childNode} = ${1:node}.lastChild;" ],                  "description": "Returns a Node representing the last direct child node of the node, or null if the node has no child.\n" },
  "nextSibling":              { "prefix": "ns",       "body": [ "const ${2:nextNode} = ${1:node}.nextSibling;" ],                 "description": "Returns a Node representing the next node in the tree, or null if there isn't such node.\n" },
  "previousSibling":          { "prefix": "ps",       "body": [ "const ${2:previousNode} = ${1:node}.previousSibling;" ],         "description": "Returns a Node representing the previous node in the tree, or null if there isn't such node.\n" },
  "textContent":              { "prefix": "tco",      "body": [ "${1:element}.textContent = '${2:content}';" ],                   "description": "Returns / Sets the textual content of an element and all its descendants.\n" },


  "insertBefore":             { "prefix": "ib",       "body": [ "${1:node}.insertBefore(${2:newNode}, ${3:referenceNode});" ],    "description": "insertBefore\n" },
  "appendChild":              { "prefix": "ac",       "body": [ "${1:node}.appendChild(${2:element});" ],                         "description": "Adds the specified childNode argument as the last child to the current node.\n" },
  "cloneNode":                { "prefix": "cn",       "body": [ "const ${2:newClone} = ${1:node}.cloneNode(true);" ],             "description": "Clone a Node, and optionally, all of its contents.\n" },
  "compareDocumentPosition":  { "prefix": "cdp",      "body": [ "const ${3:compareMask} = ${1:node}.compareDocumentPosition(${2:otherNode});" ],  "description": "Compares the position of the current node against another node in any other document.\n" },
  "contains":                 { "prefix": "con",      "body": [ "${1:node}.contains(${2:otherNode});" ],                          "description": "Returns a Boolean value indicating whether or not a node is a descendant of the calling node.\n" },
  "removeChild":              { "prefix": "rmc",      "body": [ "${1:node}.removeChild(${2:child});" ],                           "description": "removeChild\n" },
  "replaceChild":             { "prefix": "rpc",      "body": [ "${1:parentNode}.replaceChild(${2:newChild}, ${3:oldChild});" ],  "description": "replaceChild\n" },
  "hasChildNodes":            { "prefix": "hcn",      "body": [ "${1:node}.hasChildNodes()" ],                                    "description": "hasChildNodes\n" },


  "previousElementSibling":   { "prefix": "pes",      "body": [ "const ${2:prevNode} = ${1:NonDocumentTypeChildNode}.previousElementSibling;" ], "description": "Returns the Element immediately prior to this node in its parent's children list, or null if there is no Element in the list prior to this node.\n" },
  "nextElementSibling":       { "prefix": "nes",      "body": [ "const ${2:nextNode} = ${1:NonDocumentTypeChildNode}.nextElementSibling;" ],     "description": "Returns the Element immediately following this node in its parent's children list, or null if there is no Element in the list following this node.\n" },


  "firstElementChild":        { "prefix": "fec",      "body": [ "const ${2:element} = ${1:parentNode}.firstElementChild;" ],      "description": "Returns the first node which is both a child of this ParentNode and is also an Element, or null if there is none.\n" },
  "lastElementChild":         { "prefix": "lec",      "body": [ "const ${2:element} = ${1:parentNode}.lastElementChild;" ],       "description": "Returns the last node which is both a child of this ParentNode and is an Element, or null if there is none.\n" },
  "childElementCount":        { "prefix": "cec",      "body": [ "const ${2:count} = ${1:parentNode}.childElementCount;" ],        "description": "Returns the number of children of this ParentNode which are elements.\n" },
  "children":                 { "prefix": "children", "body": [ "const ${2:children} = ${1:parentNode}.children;" ],              "description": "Returns a live HTMLCollection containing all of the Element objects that are children of this ParentNode.\n" },
  "append":                   { "prefix": "append",   "body": [ "${1:parentNode}.append(${2:Nodes/DOMStrings});" ],               "description": "Inserts a set of Node objects or DOMString objects after the last child of the ParentNode. \n" },
  "prepend":                  { "prefix": "prepend",  "body": [ "${1:parentNode}.prepend(${2:Nodes/DOMStrings});" ],              "description": "Inserts a set of Node objects or DOMString objects before the first child of the ParentNode. \n" },


  "before":                   { "prefix": "before",               "body": [ "${1:ChildNode}.before(${2:Nodes/DOMStrings});" ],    "description": "Inserts a set of Node or DOMString objects in the children list of this ChildNode's parent,just before this ChildNode. \n" },
  "after":                    { "prefix": "after",                "body": [ "${1:ChildNode}.after(${2:Nodes/DOMStrings});" ],     "description": "Inserts a set of Node or DOMString objects in the children list of this ChildNode's parent, just after this ChildNode. \n" },
  "remove":                   { "prefix": "remove",               "body": [ "${1:ChildNode}.remove();" ],                         "description": "Removes this ChildNode from the children list of its parent.\n" },
  "replaceWith":              { "prefix":[ "rw", "replaceWith"],  "body": [ "${1:ChildNode}.replaceWith(${2:Node/DOMString});" ], "description": "Replaces this ChildNode in the children list of its parent with a set of Node or DOMString objects.\n" },


  "getClientRects":           { "prefix": "gcr",             "body": [ "const ${3:rectCollection} = ${1:element}.getClientRects();" ],  "description": "The getClientRects() method of the Element interface returns a collection of DOMRect objects that indicate the bounding rectangles for each CSS border box in a client.\n" },
  "getBoundingClientRect":    { "prefix": ["gbcr", "rect"],  "body": [ "const ${3:domRect} = ${1:element}.getBoundingClientRect();" ],  "description": "The `Element.getBoundingClientRect()` method returns the size of an element and its position relative to the viewport.\n" },
  "closest":                  { "prefix": "closest",  "body": [ "const ${1:closestElement} = ${2:targetElement}.closest('${3:selectorString}');" ],  "description": "Returns the Element which is the closest ancestor of the current element (or the current element itself) which matches the selectors given in parameter.\n" },
  "setAttribute":             { "prefix": "sa",       "body": [ "${1:element}.setAttribute('${2:attrName}', '${3:value}');" ],          "description": "Sets the value of a named attribute of the current node.\n" },
  "getAttribute":             { "prefix": "ga",       "body": [ "const ${3:attribute} = ${1:element}.getAttribute('${2:attrName}');" ], "description": "Retrieves the value of the named attribute from the current node and returns it as an Object.\n" },
  "hasAttribute":             { "prefix": "ha",       "body": [ "${1:element}.hasAttribute('${2:attrName}')" ],                         "description": "Returns a Boolean indicating if the element has the specified attribute or not.\n" },
  "removeAttribute":          { "prefix": "ra",       "body": [ "${1:element}.removeAttribute('${2:attrName}');" ],                     "description": "Removes the named attribute from the current node.\n" },
  "toggleAttribute":          { "prefix": "ta",       "body": [ "${1:element}.toggleAttribute('${2:attrName}');" ],                     "description": "Toggles a boolean attribute, removing it if it is present and adding it if it is not present, on the specified element.\n" },
  "matches":                  { "prefix": "matches",  "body": [ "${1:element}.matches('${2:selectorString}')" ],                        "description": "Returns a Boolean indicating whether or not the element would be selected by the specified selector string.\n" },
  "innerHTML":                { "prefix": "ih",       "body": [ "${1:element}.innerHTML = ${2:'DOMString'};" ],                         "description": "gets or sets the HTML or XML markup contained within the element.\n" },
  "outerHTML":                { "prefix": "oh",       "body": [ "${1:element}.outerHTML = ${2:'DOMString'};" ],                         "description": "gets the serialized HTML fragment describing the element including its descendants. set to replace the element with nodes parsed from the given string.\n" },
  "innerText":                { "prefix": "it",       "body": [ "${1:element}.innerText = ${2:'renderText'};" ],                        "description": "gets or sets the HTML or XML markup contained within the element.\n" },
  "classList.add":            { "prefix": "cla",      "body": [ "${1:element}.classList.add('${2:className}');" ],                      "description": "classList.add\n" },
  "classList.contains":       { "prefix": "clc",      "body": [ "${1:element}.classList.contains('${2:className}');" ],                 "description": "classList.contains\n" },
  "classList.remove":         { "prefix": "clr",      "body": [ "${1:element}.classList.remove('${2:className}');" ],                   "description": "classList.remove\n" },
  "classList.toggle":         { "prefix": "clt",      "body": [ "${1:element}.classList.toggle('${2:className}');" ],                   "description": "classList.toggle\n" },
  "insertAdjacentHTML('beforebegin', 'DOMString')":   { "prefix": ["before", "iah.before"],    "body": [ "${1:element}.insertAdjacentHTML('beforebegin', ${2:'DOMString'});" ],            "description": "Before the element itself.\n" },
  "insertAdjacentHTML('afterend', 'DOMString')":      { "prefix": ["after", "iah.after"],      "body": [ "${1:element}.insertAdjacentHTML('afterend', ${2:'DOMString'});" ],               "description": "After the element itself.\n" },
  "insertAdjacentHTML('afterbegin', 'DOMString')":    { "prefix": ["prepend", "iah.prepend"],  "body": [ "${1:element}.insertAdjacentHTML('afterbegin', ${2:'DOMString'});" ],             "description": "Just inside the element, before its first child.\n" },
  "insertAdjacentHTML('beforeend', 'DOMString')":     { "prefix": ["append", "iah.append"],    "body": [ "${1:element}.insertAdjacentHTML('beforeend', ${2:'DOMString'});" ],              "description": "Just inside the element, after its last child.\n" },
  "insertAdjacentElement('beforebegin', element)":    { "prefix": ["before", "iae.before"],    "body": [ "${1:element}.insertAdjacentElement('beforebegin', ${2:element});" ],             "description": "Before the element itself.\n" },
  "insertAdjacentElement('afterend', element)":       { "prefix": ["after", "iae.after"],      "body": [ "${1:element}.insertAdjacentElement('afterend', ${2:element});" ],                "description": "After the element itself.\n" },
  "insertAdjacentElement('afterbegin', element)":     { "prefix": ["prepend", "iae.prepend"],  "body": [ "${1:element}.insertAdjacentElement('afterbegin', ${2:element});" ],              "description": "Just inside the element, before its first child.\n" },
  "insertAdjacentElement('beforeend', element)":      { "prefix": ["append", "iae.append"],    "body": [ "${1:element}.insertAdjacentElement('beforeend', ${2:element});" ],               "description": "Just inside the element, after its last child.\n" },
  "insertAdjacentText('beforebegin', value)":         { "prefix": ["before", "iat.before"],    "body": [ "${1:element}.insertAdjacentText('beforebegin', ${2:value});" ],                  "description": "Before the element itself.\n" },
  "insertAdjacentText('afterend', value)":            { "prefix": ["after", "iat.after"],      "body": [ "${1:element}.insertAdjacentText('afterend', ${2:value});" ],                     "description": "After the element itself.\n" },
  "insertAdjacentText('afterbegin', value)":          { "prefix": ["prepend", "iat.prepend"],  "body": [ "${1:element}.insertAdjacentText('afterbegin', ${2:value});" ],                   "description": "Just inside the element, before its first child.\n" },
  "insertAdjacentText('beforeend', value)":           { "prefix": ["append", "iat.append"],    "body": [ "${1:element}.insertAdjacentText('beforeend', ${2:value});" ],                    "description": "Just inside the element, after its last child.\n" },
  "scrollTo":                                         { "prefix": "scrollTo",                  "body": [ "${1:element}.scrollTo({${2:left}, ${3:top}, behavior: 'smooth'});" ],            "description": "element.scrollTo\n" },
  "scrollIntoView":                                   { "prefix": "scrollIntoView",            "body": [ "${1:element}.scrollIntoView();" ],                                               "description": "element.scrollIntoView\n" },
  "element.scrollLeft":                               { "prefix": "element.scrollLeft",        "body": [ "${1:element}.scrollLeft;" ],                                                     "description": "gets or sets the number of pixels that an element's content is scrolled from its left edge.\n" },
  "element.scrollTop":                                { "prefix": "element.scrollTop",         "body": [ "${1:element}.scrollTop;" ],                                                      "description": "gets or sets the number of pixels that an element's content is scrolled vertically.\n" },
  "element.scrollHeight":                             { "prefix": "element.scrollHeight",      "body": [ "${1:element}.scrollHeight;" ],                                                   "description": "element.scrollHeight;\n" }

}